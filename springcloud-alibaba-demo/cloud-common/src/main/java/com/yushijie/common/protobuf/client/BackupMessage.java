// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/BackupMessage.proto

package com.yushijie.common.protobuf.client;

public final class BackupMessage {
    private BackupMessage() {}
    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }
    /**
     * <pre>
     * 进度类型
     * </pre>
     *
     * Protobuf enum {@code one2data.rbtmqmsgcli.client.ProgressType}
     */
    public enum ProgressType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>PT_NONE = 0;</code>
         */
        PT_NONE(0),
        /**
         * <pre>
         * 总进度
         * </pre>
         *
         * <code>PT_TOTAL = 1;</code>
         */
        PT_TOTAL(1),
        /**
         * <pre>
         * 块设备进度
         * </pre>
         *
         * <code>PT_BLOCK = 2;</code>
         */
        PT_BLOCK(2),
        /**
         * <pre>
         * 全部进度
         * </pre>
         *
         * <code>PT_ALL = 3;</code>
         */
        PT_ALL(3),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>PT_NONE = 0;</code>
         */
        public static final int PT_NONE_VALUE = 0;
        /**
         * <pre>
         * 总进度
         * </pre>
         *
         * <code>PT_TOTAL = 1;</code>
         */
        public static final int PT_TOTAL_VALUE = 1;
        /**
         * <pre>
         * 块设备进度
         * </pre>
         *
         * <code>PT_BLOCK = 2;</code>
         */
        public static final int PT_BLOCK_VALUE = 2;
        /**
         * <pre>
         * 全部进度
         * </pre>
         *
         * <code>PT_ALL = 3;</code>
         */
        public static final int PT_ALL_VALUE = 3;


        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static ProgressType valueOf(int value) {
            return forNumber(value);
        }

        public static ProgressType forNumber(int value) {
            switch (value) {
                case 0: return PT_NONE;
                case 1: return PT_TOTAL;
                case 2: return PT_BLOCK;
                case 3: return PT_ALL;
                default: return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ProgressType>
        internalGetValueMap() {
            return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
                ProgressType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ProgressType>() {
                    public ProgressType findValueByNumber(int number) {
                        return ProgressType.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.getDescriptor().getEnumTypes().get(0);
        }

        private static final ProgressType[] VALUES = values();

        public static ProgressType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private ProgressType(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:one2data.rbtmqmsgcli.client.ProgressType)
    }

    public interface BackupConfigOrBuilder extends
            // @@protoc_insertion_point(interface_extends:one2data.rbtmqmsgcli.client.BackupConfig)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         *备份配置所属的备份任务唯一ID
         * </pre>
         *
         * <code>optional string backup_task_uuid = 1;</code>
         */
        String getBackupTaskUuid();
        /**
         * <pre>
         *备份配置所属的备份任务唯一ID
         * </pre>
         *
         * <code>optional string backup_task_uuid = 1;</code>
         */
        com.google.protobuf.ByteString
        getBackupTaskUuidBytes();

        /**
         * <pre>
         *需要备份的设备硬件信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
         */
        boolean hasNeedBackupHardware();
        /**
         * <pre>
         *需要备份的设备硬件信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware getNeedBackupHardware();
        /**
         * <pre>
         *需要备份的设备硬件信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardwareOrBuilder getNeedBackupHardwareOrBuilder();

        /**
         * <pre>
         *网络配置信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
         */
        boolean hasNetworkInfo();
        /**
         * <pre>
         *网络配置信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo getNetworkInfo();
        /**
         * <pre>
         *网络配置信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfoOrBuilder getNetworkInfoOrBuilder();

        /**
         * <pre>
         * 扩展参数
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
         */
        boolean hasExtendParas();
        /**
         * <pre>
         * 扩展参数
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter getExtendParas();
        /**
         * <pre>
         * 扩展参数
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameterOrBuilder getExtendParasOrBuilder();

        /**
         * <pre>
         *存储 Convert 服务端口
         * </pre>
         *
         * <code>optional int32 storage_convert_service_port = 5;</code>
         */
        int getStorageConvertServicePort();

        /**
         * <pre>
         *通道类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
         */
        int getChannelTypeValue();
        /**
         * <pre>
         *通道类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType getChannelType();

        /**
         * <pre>
         *数据存储粒度
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
         */
        int getDataStorageGranularityValue();
        /**
         * <pre>
         *数据存储粒度
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity getDataStorageGranularity();
    }
    /**
     * <pre>
     *备份配置信息
     * </pre>
     *
     * Protobuf type {@code one2data.rbtmqmsgcli.client.BackupConfig}
     */
    public  static final class BackupConfig extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:one2data.rbtmqmsgcli.client.BackupConfig)
            BackupConfigOrBuilder {
        // Use BackupConfig.newBuilder() to construct.
        private BackupConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
        private BackupConfig() {
            backupTaskUuid_ = "";
            storageConvertServicePort_ = 0;
            channelType_ = 0;
            dataStorageGranularity_ = 0;
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }
        private BackupConfig(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            backupTaskUuid_ = s;
                            break;
                        }
                        case 18: {
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder subBuilder = null;
                            if (needBackupHardware_ != null) {
                                subBuilder = needBackupHardware_.toBuilder();
                            }
                            needBackupHardware_ = input.readMessage(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(needBackupHardware_);
                                needBackupHardware_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 26: {
                            cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.Builder subBuilder = null;
                            if (networkInfo_ != null) {
                                subBuilder = networkInfo_.toBuilder();
                            }
                            networkInfo_ = input.readMessage(cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(networkInfo_);
                                networkInfo_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 34: {
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder subBuilder = null;
                            if (extendParas_ != null) {
                                subBuilder = extendParas_.toBuilder();
                            }
                            extendParas_ = input.readMessage(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(extendParas_);
                                extendParas_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 40: {

                            storageConvertServicePort_ = input.readInt32();
                            break;
                        }
                        case 48: {
                            int rawValue = input.readEnum();

                            channelType_ = rawValue;
                            break;
                        }
                        case 56: {
                            int rawValue = input.readEnum();

                            dataStorageGranularity_ = rawValue;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.Builder.class);
        }

        /**
         * <pre>
         * 备份客户端与存储数据传输通道类型
         * </pre>
         *
         * Protobuf enum {@code one2data.rbtmqmsgcli.client.BackupConfig.ChannelType}
         */
        public enum ChannelType
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>CT_TCP = 0;</code>
             */
            CT_TCP(0),
            /**
             * <code>CT_LAN_FREE = 1;</code>
             */
            CT_LAN_FREE(1),
            UNRECOGNIZED(-1),
            ;

            /**
             * <code>CT_TCP = 0;</code>
             */
            public static final int CT_TCP_VALUE = 0;
            /**
             * <code>CT_LAN_FREE = 1;</code>
             */
            public static final int CT_LAN_FREE_VALUE = 1;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @Deprecated
            public static ChannelType valueOf(int value) {
                return forNumber(value);
            }

            public static ChannelType forNumber(int value) {
                switch (value) {
                    case 0: return CT_TCP;
                    case 1: return CT_LAN_FREE;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<ChannelType>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    ChannelType> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<ChannelType>() {
                        public ChannelType findValueByNumber(int number) {
                            return ChannelType.forNumber(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.getDescriptor().getEnumTypes().get(0);
            }

            private static final ChannelType[] VALUES = values();

            public static ChannelType valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private ChannelType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:one2data.rbtmqmsgcli.client.BackupConfig.ChannelType)
        }

        /**
         * <pre>
         * 数据存储粒度
         * </pre>
         *
         * Protobuf enum {@code one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity}
         */
        public enum DataStorageGranularity
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <pre>
             *秒级
             * </pre>
             *
             * <code>DSG_SECOND = 0;</code>
             */
            DSG_SECOND(0),
            /**
             * <pre>
             *微秒级
             * </pre>
             *
             * <code>DSG_USECOND = 1;</code>
             */
            DSG_USECOND(1),
            UNRECOGNIZED(-1),
            ;

            /**
             * <pre>
             *秒级
             * </pre>
             *
             * <code>DSG_SECOND = 0;</code>
             */
            public static final int DSG_SECOND_VALUE = 0;
            /**
             * <pre>
             *微秒级
             * </pre>
             *
             * <code>DSG_USECOND = 1;</code>
             */
            public static final int DSG_USECOND_VALUE = 1;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @Deprecated
            public static DataStorageGranularity valueOf(int value) {
                return forNumber(value);
            }

            public static DataStorageGranularity forNumber(int value) {
                switch (value) {
                    case 0: return DSG_SECOND;
                    case 1: return DSG_USECOND;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<DataStorageGranularity>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    DataStorageGranularity> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<DataStorageGranularity>() {
                        public DataStorageGranularity findValueByNumber(int number) {
                            return DataStorageGranularity.forNumber(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.getDescriptor().getEnumTypes().get(1);
            }

            private static final DataStorageGranularity[] VALUES = values();

            public static DataStorageGranularity valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private DataStorageGranularity(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity)
        }

        public interface NeedBackupHardwareOrBuilder extends
                // @@protoc_insertion_point(interface_extends:one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware)
                com.google.protobuf.MessageOrBuilder {

            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>
            getHarddiskKeyList();
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getHarddiskKey(int index);
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            int getHarddiskKeyCount();
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getHarddiskKeyOrBuilderList();
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getHarddiskKeyOrBuilder(
                    int index);

            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>
            getPartitionKeyList();
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getPartitionKey(int index);
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            int getPartitionKeyCount();
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getPartitionKeyOrBuilderList();
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getPartitionKeyOrBuilder(
                    int index);

            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>
            getLvKeyList();
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getLvKey(int index);
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            int getLvKeyCount();
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getLvKeyOrBuilderList();
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getLvKeyOrBuilder(
                    int index);

            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>
            getDriftLvKeyList();
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getDriftLvKey(int index);
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            int getDriftLvKeyCount();
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getDriftLvKeyOrBuilderList();
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getDriftLvKeyOrBuilder(
                    int index);
        }
        /**
         * <pre>
         *需要备份的硬件信息列表
         * </pre>
         *
         * Protobuf type {@code one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware}
         */
        public  static final class NeedBackupHardware extends
                com.google.protobuf.GeneratedMessageV3 implements
                // @@protoc_insertion_point(message_implements:one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware)
                NeedBackupHardwareOrBuilder {
            // Use NeedBackupHardware.newBuilder() to construct.
            private NeedBackupHardware(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
                super(builder);
            }
            private NeedBackupHardware() {
                harddiskKey_ = java.util.Collections.emptyList();
                partitionKey_ = java.util.Collections.emptyList();
                lvKey_ = java.util.Collections.emptyList();
                driftLvKey_ = java.util.Collections.emptyList();
            }

            @Override
            public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
                return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
            }
            private NeedBackupHardware(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                this();
                int mutable_bitField0_ = 0;
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!input.skipField(tag)) {
                                    done = true;
                                }
                                break;
                            }
                            case 10: {
                                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                    harddiskKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>();
                                    mutable_bitField0_ |= 0x00000001;
                                }
                                harddiskKey_.add(
                                        input.readMessage(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.parser(), extensionRegistry));
                                break;
                            }
                            case 18: {
                                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                    partitionKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>();
                                    mutable_bitField0_ |= 0x00000002;
                                }
                                partitionKey_.add(
                                        input.readMessage(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.parser(), extensionRegistry));
                                break;
                            }
                            case 26: {
                                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                    lvKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>();
                                    mutable_bitField0_ |= 0x00000004;
                                }
                                lvKey_.add(
                                        input.readMessage(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.parser(), extensionRegistry));
                                break;
                            }
                            case 34: {
                                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                    driftLvKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>();
                                    mutable_bitField0_ |= 0x00000008;
                                }
                                driftLvKey_.add(
                                        input.readMessage(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.parser(), extensionRegistry));
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (java.io.IOException e) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(
                            e).setUnfinishedMessage(this);
                } finally {
                    if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                        harddiskKey_ = java.util.Collections.unmodifiableList(harddiskKey_);
                    }
                    if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                        partitionKey_ = java.util.Collections.unmodifiableList(partitionKey_);
                    }
                    if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                        lvKey_ = java.util.Collections.unmodifiableList(lvKey_);
                    }
                    if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                        driftLvKey_ = java.util.Collections.unmodifiableList(driftLvKey_);
                    }
                    makeExtensionsImmutable();
                }
            }
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder.class);
            }

            public static final int HARDDISK_KEY_FIELD_NUMBER = 1;
            private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> harddiskKey_;
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getHarddiskKeyList() {
                return harddiskKey_;
            }
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getHarddiskKeyOrBuilderList() {
                return harddiskKey_;
            }
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            public int getHarddiskKeyCount() {
                return harddiskKey_.size();
            }
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getHarddiskKey(int index) {
                return harddiskKey_.get(index);
            }
            /**
             * <pre>
             *需要备份的磁盘，该磁盘必须为裸盘
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getHarddiskKeyOrBuilder(
                    int index) {
                return harddiskKey_.get(index);
            }

            public static final int PARTITION_KEY_FIELD_NUMBER = 2;
            private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> partitionKey_;
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getPartitionKeyList() {
                return partitionKey_;
            }
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getPartitionKeyOrBuilderList() {
                return partitionKey_;
            }
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            public int getPartitionKeyCount() {
                return partitionKey_.size();
            }
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getPartitionKey(int index) {
                return partitionKey_.get(index);
            }
            /**
             * <pre>
             *需要备份的分区，该分区必须没有被LV引用
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getPartitionKeyOrBuilder(
                    int index) {
                return partitionKey_.get(index);
            }

            public static final int LV_KEY_FIELD_NUMBER = 3;
            private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> lvKey_;
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getLvKeyList() {
                return lvKey_;
            }
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getLvKeyOrBuilderList() {
                return lvKey_;
            }
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            public int getLvKeyCount() {
                return lvKey_.size();
            }
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getLvKey(int index) {
                return lvKey_.get(index);
            }
            /**
             * <pre>
             *需要备份的逻辑卷
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getLvKeyOrBuilder(
                    int index) {
                return lvKey_.get(index);
            }

            public static final int DRIFT_LV_KEY_FIELD_NUMBER = 4;
            private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> driftLvKey_;
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getDriftLvKeyList() {
                return driftLvKey_;
            }
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getDriftLvKeyOrBuilderList() {
                return driftLvKey_;
            }
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            public int getDriftLvKeyCount() {
                return driftLvKey_.size();
            }
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getDriftLvKey(int index) {
                return driftLvKey_.get(index);
            }
            /**
             * <pre>
             *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
             *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
             *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
             * </pre>
             *
             * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getDriftLvKeyOrBuilder(
                    int index) {
                return driftLvKey_.get(index);
            }

            private byte memoizedIsInitialized = -1;
            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized == 1) return true;
                if (isInitialized == 0) return false;

                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(com.google.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                for (int i = 0; i < harddiskKey_.size(); i++) {
                    output.writeMessage(1, harddiskKey_.get(i));
                }
                for (int i = 0; i < partitionKey_.size(); i++) {
                    output.writeMessage(2, partitionKey_.get(i));
                }
                for (int i = 0; i < lvKey_.size(); i++) {
                    output.writeMessage(3, lvKey_.get(i));
                }
                for (int i = 0; i < driftLvKey_.size(); i++) {
                    output.writeMessage(4, driftLvKey_.get(i));
                }
            }

            public int getSerializedSize() {
                int size = memoizedSize;
                if (size != -1) return size;

                size = 0;
                for (int i = 0; i < harddiskKey_.size(); i++) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeMessageSize(1, harddiskKey_.get(i));
                }
                for (int i = 0; i < partitionKey_.size(); i++) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeMessageSize(2, partitionKey_.get(i));
                }
                for (int i = 0; i < lvKey_.size(); i++) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeMessageSize(3, lvKey_.get(i));
                }
                for (int i = 0; i < driftLvKey_.size(); i++) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeMessageSize(4, driftLvKey_.get(i));
                }
                memoizedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;
            @Override
            public boolean equals(final Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware)) {
                    return super.equals(obj);
                }
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware other = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware) obj;

                boolean result = true;
                result = result && getHarddiskKeyList()
                        .equals(other.getHarddiskKeyList());
                result = result && getPartitionKeyList()
                        .equals(other.getPartitionKeyList());
                result = result && getLvKeyList()
                        .equals(other.getLvKeyList());
                result = result && getDriftLvKeyList()
                        .equals(other.getDriftLvKeyList());
                return result;
            }

            @Override
            public int hashCode() {
                if (memoizedHashCode != 0) {
                    return memoizedHashCode;
                }
                int hash = 41;
                hash = (19 * hash) + getDescriptorForType().hashCode();
                if (getHarddiskKeyCount() > 0) {
                    hash = (37 * hash) + HARDDISK_KEY_FIELD_NUMBER;
                    hash = (53 * hash) + getHarddiskKeyList().hashCode();
                }
                if (getPartitionKeyCount() > 0) {
                    hash = (37 * hash) + PARTITION_KEY_FIELD_NUMBER;
                    hash = (53 * hash) + getPartitionKeyList().hashCode();
                }
                if (getLvKeyCount() > 0) {
                    hash = (37 * hash) + LV_KEY_FIELD_NUMBER;
                    hash = (53 * hash) + getLvKeyList().hashCode();
                }
                if (getDriftLvKeyCount() > 0) {
                    hash = (37 * hash) + DRIFT_LV_KEY_FIELD_NUMBER;
                    hash = (53 * hash) + getDriftLvKeyList().hashCode();
                }
                hash = (29 * hash) + unknownFields.hashCode();
                memoizedHashCode = hash;
                return hash;
            }

            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(
                    com.google.protobuf.ByteString data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(
                    com.google.protobuf.ByteString data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(
                    byte[] data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseDelimitedFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(
                    com.google.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            public Builder newBuilderForType() { return newBuilder(); }
            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }
            public static Builder newBuilder(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware prototype) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
            }
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE
                        ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            protected Builder newBuilderForType(
                    BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }
            /**
             * <pre>
             *需要备份的硬件信息列表
             * </pre>
             *
             * Protobuf type {@code one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware}
             */
            public static final class Builder extends
                    com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                    // @@protoc_insertion_point(builder_implements:one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware)
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardwareOrBuilder {
                public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_descriptor;
                }

                protected FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder.class);
                }

                // Construct using cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(
                        BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }
                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessageV3
                            .alwaysUseFieldBuilders) {
                        getHarddiskKeyFieldBuilder();
                        getPartitionKeyFieldBuilder();
                        getLvKeyFieldBuilder();
                        getDriftLvKeyFieldBuilder();
                    }
                }
                public Builder clear() {
                    super.clear();
                    if (harddiskKeyBuilder_ == null) {
                        harddiskKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000001);
                    } else {
                        harddiskKeyBuilder_.clear();
                    }
                    if (partitionKeyBuilder_ == null) {
                        partitionKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        partitionKeyBuilder_.clear();
                    }
                    if (lvKeyBuilder_ == null) {
                        lvKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000004);
                    } else {
                        lvKeyBuilder_.clear();
                    }
                    if (driftLvKeyBuilder_ == null) {
                        driftLvKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000008);
                    } else {
                        driftLvKeyBuilder_.clear();
                    }
                    return this;
                }

                public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_descriptor;
                }

                public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware getDefaultInstanceForType() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.getDefaultInstance();
                }

                public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware build() {
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware buildPartial() {
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware result = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware(this);
                    int from_bitField0_ = bitField0_;
                    if (harddiskKeyBuilder_ == null) {
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            harddiskKey_ = java.util.Collections.unmodifiableList(harddiskKey_);
                            bitField0_ = (bitField0_ & ~0x00000001);
                        }
                        result.harddiskKey_ = harddiskKey_;
                    } else {
                        result.harddiskKey_ = harddiskKeyBuilder_.build();
                    }
                    if (partitionKeyBuilder_ == null) {
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            partitionKey_ = java.util.Collections.unmodifiableList(partitionKey_);
                            bitField0_ = (bitField0_ & ~0x00000002);
                        }
                        result.partitionKey_ = partitionKey_;
                    } else {
                        result.partitionKey_ = partitionKeyBuilder_.build();
                    }
                    if (lvKeyBuilder_ == null) {
                        if (((bitField0_ & 0x00000004) == 0x00000004)) {
                            lvKey_ = java.util.Collections.unmodifiableList(lvKey_);
                            bitField0_ = (bitField0_ & ~0x00000004);
                        }
                        result.lvKey_ = lvKey_;
                    } else {
                        result.lvKey_ = lvKeyBuilder_.build();
                    }
                    if (driftLvKeyBuilder_ == null) {
                        if (((bitField0_ & 0x00000008) == 0x00000008)) {
                            driftLvKey_ = java.util.Collections.unmodifiableList(driftLvKey_);
                            bitField0_ = (bitField0_ & ~0x00000008);
                        }
                        result.driftLvKey_ = driftLvKey_;
                    } else {
                        result.driftLvKey_ = driftLvKeyBuilder_.build();
                    }
                    onBuilt();
                    return result;
                }

                public Builder clone() {
                    return (Builder) super.clone();
                }
                public Builder setField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return (Builder) super.setField(field, value);
                }
                public Builder clearField(
                        com.google.protobuf.Descriptors.FieldDescriptor field) {
                    return (Builder) super.clearField(field);
                }
                public Builder clearOneof(
                        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                    return (Builder) super.clearOneof(oneof);
                }
                public Builder setRepeatedField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        int index, Object value) {
                    return (Builder) super.setRepeatedField(field, index, value);
                }
                public Builder addRepeatedField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return (Builder) super.addRepeatedField(field, value);
                }
                public Builder mergeFrom(com.google.protobuf.Message other) {
                    if (other instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware) {
                        return mergeFrom((cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware)other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware other) {
                    if (other == cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.getDefaultInstance()) return this;
                    if (harddiskKeyBuilder_ == null) {
                        if (!other.harddiskKey_.isEmpty()) {
                            if (harddiskKey_.isEmpty()) {
                                harddiskKey_ = other.harddiskKey_;
                                bitField0_ = (bitField0_ & ~0x00000001);
                            } else {
                                ensureHarddiskKeyIsMutable();
                                harddiskKey_.addAll(other.harddiskKey_);
                            }
                            onChanged();
                        }
                    } else {
                        if (!other.harddiskKey_.isEmpty()) {
                            if (harddiskKeyBuilder_.isEmpty()) {
                                harddiskKeyBuilder_.dispose();
                                harddiskKeyBuilder_ = null;
                                harddiskKey_ = other.harddiskKey_;
                                bitField0_ = (bitField0_ & ~0x00000001);
                                harddiskKeyBuilder_ =
                                        com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                                getHarddiskKeyFieldBuilder() : null;
                            } else {
                                harddiskKeyBuilder_.addAllMessages(other.harddiskKey_);
                            }
                        }
                    }
                    if (partitionKeyBuilder_ == null) {
                        if (!other.partitionKey_.isEmpty()) {
                            if (partitionKey_.isEmpty()) {
                                partitionKey_ = other.partitionKey_;
                                bitField0_ = (bitField0_ & ~0x00000002);
                            } else {
                                ensurePartitionKeyIsMutable();
                                partitionKey_.addAll(other.partitionKey_);
                            }
                            onChanged();
                        }
                    } else {
                        if (!other.partitionKey_.isEmpty()) {
                            if (partitionKeyBuilder_.isEmpty()) {
                                partitionKeyBuilder_.dispose();
                                partitionKeyBuilder_ = null;
                                partitionKey_ = other.partitionKey_;
                                bitField0_ = (bitField0_ & ~0x00000002);
                                partitionKeyBuilder_ =
                                        com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                                getPartitionKeyFieldBuilder() : null;
                            } else {
                                partitionKeyBuilder_.addAllMessages(other.partitionKey_);
                            }
                        }
                    }
                    if (lvKeyBuilder_ == null) {
                        if (!other.lvKey_.isEmpty()) {
                            if (lvKey_.isEmpty()) {
                                lvKey_ = other.lvKey_;
                                bitField0_ = (bitField0_ & ~0x00000004);
                            } else {
                                ensureLvKeyIsMutable();
                                lvKey_.addAll(other.lvKey_);
                            }
                            onChanged();
                        }
                    } else {
                        if (!other.lvKey_.isEmpty()) {
                            if (lvKeyBuilder_.isEmpty()) {
                                lvKeyBuilder_.dispose();
                                lvKeyBuilder_ = null;
                                lvKey_ = other.lvKey_;
                                bitField0_ = (bitField0_ & ~0x00000004);
                                lvKeyBuilder_ =
                                        com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                                getLvKeyFieldBuilder() : null;
                            } else {
                                lvKeyBuilder_.addAllMessages(other.lvKey_);
                            }
                        }
                    }
                    if (driftLvKeyBuilder_ == null) {
                        if (!other.driftLvKey_.isEmpty()) {
                            if (driftLvKey_.isEmpty()) {
                                driftLvKey_ = other.driftLvKey_;
                                bitField0_ = (bitField0_ & ~0x00000008);
                            } else {
                                ensureDriftLvKeyIsMutable();
                                driftLvKey_.addAll(other.driftLvKey_);
                            }
                            onChanged();
                        }
                    } else {
                        if (!other.driftLvKey_.isEmpty()) {
                            if (driftLvKeyBuilder_.isEmpty()) {
                                driftLvKeyBuilder_.dispose();
                                driftLvKeyBuilder_ = null;
                                driftLvKey_ = other.driftLvKey_;
                                bitField0_ = (bitField0_ & ~0x00000008);
                                driftLvKeyBuilder_ =
                                        com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                                getDriftLvKeyFieldBuilder() : null;
                            } else {
                                driftLvKeyBuilder_.addAllMessages(other.driftLvKey_);
                            }
                        }
                    }
                    onChanged();
                    return this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public Builder mergeFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware parsedMessage = null;
                    try {
                        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        parsedMessage = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware) e.getUnfinishedMessage();
                        throw e.unwrapIOException();
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        }
                    }
                    return this;
                }
                private int bitField0_;

                private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> harddiskKey_ =
                        java.util.Collections.emptyList();
                private void ensureHarddiskKeyIsMutable() {
                    if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                        harddiskKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>(harddiskKey_);
                        bitField0_ |= 0x00000001;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder> harddiskKeyBuilder_;

                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getHarddiskKeyList() {
                    if (harddiskKeyBuilder_ == null) {
                        return java.util.Collections.unmodifiableList(harddiskKey_);
                    } else {
                        return harddiskKeyBuilder_.getMessageList();
                    }
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public int getHarddiskKeyCount() {
                    if (harddiskKeyBuilder_ == null) {
                        return harddiskKey_.size();
                    } else {
                        return harddiskKeyBuilder_.getCount();
                    }
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getHarddiskKey(int index) {
                    if (harddiskKeyBuilder_ == null) {
                        return harddiskKey_.get(index);
                    } else {
                        return harddiskKeyBuilder_.getMessage(index);
                    }
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder setHarddiskKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (harddiskKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureHarddiskKeyIsMutable();
                        harddiskKey_.set(index, value);
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.setMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder setHarddiskKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (harddiskKeyBuilder_ == null) {
                        ensureHarddiskKeyIsMutable();
                        harddiskKey_.set(index, builderForValue.build());
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.setMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder addHarddiskKey(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (harddiskKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureHarddiskKeyIsMutable();
                        harddiskKey_.add(value);
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.addMessage(value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder addHarddiskKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (harddiskKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureHarddiskKeyIsMutable();
                        harddiskKey_.add(index, value);
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.addMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder addHarddiskKey(
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (harddiskKeyBuilder_ == null) {
                        ensureHarddiskKeyIsMutable();
                        harddiskKey_.add(builderForValue.build());
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.addMessage(builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder addHarddiskKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (harddiskKeyBuilder_ == null) {
                        ensureHarddiskKeyIsMutable();
                        harddiskKey_.add(index, builderForValue.build());
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.addMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder addAllHarddiskKey(
                        Iterable<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> values) {
                    if (harddiskKeyBuilder_ == null) {
                        ensureHarddiskKeyIsMutable();
                        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                                values, harddiskKey_);
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.addAllMessages(values);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder clearHarddiskKey() {
                    if (harddiskKeyBuilder_ == null) {
                        harddiskKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000001);
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.clear();
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public Builder removeHarddiskKey(int index) {
                    if (harddiskKeyBuilder_ == null) {
                        ensureHarddiskKeyIsMutable();
                        harddiskKey_.remove(index);
                        onChanged();
                    } else {
                        harddiskKeyBuilder_.remove(index);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder getHarddiskKeyBuilder(
                        int index) {
                    return getHarddiskKeyFieldBuilder().getBuilder(index);
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getHarddiskKeyOrBuilder(
                        int index) {
                    if (harddiskKeyBuilder_ == null) {
                        return harddiskKey_.get(index);  } else {
                        return harddiskKeyBuilder_.getMessageOrBuilder(index);
                    }
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getHarddiskKeyOrBuilderList() {
                    if (harddiskKeyBuilder_ != null) {
                        return harddiskKeyBuilder_.getMessageOrBuilderList();
                    } else {
                        return java.util.Collections.unmodifiableList(harddiskKey_);
                    }
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addHarddiskKeyBuilder() {
                    return getHarddiskKeyFieldBuilder().addBuilder(
                            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addHarddiskKeyBuilder(
                        int index) {
                    return getHarddiskKeyFieldBuilder().addBuilder(
                            index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *需要备份的磁盘，该磁盘必须为裸盘
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey harddisk_key = 1;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder>
                getHarddiskKeyBuilderList() {
                    return getHarddiskKeyFieldBuilder().getBuilderList();
                }
                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getHarddiskKeyFieldBuilder() {
                    if (harddiskKeyBuilder_ == null) {
                        harddiskKeyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                                cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>(
                                harddiskKey_,
                                ((bitField0_ & 0x00000001) == 0x00000001),
                                getParentForChildren(),
                                isClean());
                        harddiskKey_ = null;
                    }
                    return harddiskKeyBuilder_;
                }

                private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> partitionKey_ =
                        java.util.Collections.emptyList();
                private void ensurePartitionKeyIsMutable() {
                    if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                        partitionKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>(partitionKey_);
                        bitField0_ |= 0x00000002;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder> partitionKeyBuilder_;

                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getPartitionKeyList() {
                    if (partitionKeyBuilder_ == null) {
                        return java.util.Collections.unmodifiableList(partitionKey_);
                    } else {
                        return partitionKeyBuilder_.getMessageList();
                    }
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public int getPartitionKeyCount() {
                    if (partitionKeyBuilder_ == null) {
                        return partitionKey_.size();
                    } else {
                        return partitionKeyBuilder_.getCount();
                    }
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getPartitionKey(int index) {
                    if (partitionKeyBuilder_ == null) {
                        return partitionKey_.get(index);
                    } else {
                        return partitionKeyBuilder_.getMessage(index);
                    }
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder setPartitionKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (partitionKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensurePartitionKeyIsMutable();
                        partitionKey_.set(index, value);
                        onChanged();
                    } else {
                        partitionKeyBuilder_.setMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder setPartitionKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (partitionKeyBuilder_ == null) {
                        ensurePartitionKeyIsMutable();
                        partitionKey_.set(index, builderForValue.build());
                        onChanged();
                    } else {
                        partitionKeyBuilder_.setMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder addPartitionKey(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (partitionKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensurePartitionKeyIsMutable();
                        partitionKey_.add(value);
                        onChanged();
                    } else {
                        partitionKeyBuilder_.addMessage(value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder addPartitionKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (partitionKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensurePartitionKeyIsMutable();
                        partitionKey_.add(index, value);
                        onChanged();
                    } else {
                        partitionKeyBuilder_.addMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder addPartitionKey(
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (partitionKeyBuilder_ == null) {
                        ensurePartitionKeyIsMutable();
                        partitionKey_.add(builderForValue.build());
                        onChanged();
                    } else {
                        partitionKeyBuilder_.addMessage(builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder addPartitionKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (partitionKeyBuilder_ == null) {
                        ensurePartitionKeyIsMutable();
                        partitionKey_.add(index, builderForValue.build());
                        onChanged();
                    } else {
                        partitionKeyBuilder_.addMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder addAllPartitionKey(
                        Iterable<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> values) {
                    if (partitionKeyBuilder_ == null) {
                        ensurePartitionKeyIsMutable();
                        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                                values, partitionKey_);
                        onChanged();
                    } else {
                        partitionKeyBuilder_.addAllMessages(values);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder clearPartitionKey() {
                    if (partitionKeyBuilder_ == null) {
                        partitionKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000002);
                        onChanged();
                    } else {
                        partitionKeyBuilder_.clear();
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public Builder removePartitionKey(int index) {
                    if (partitionKeyBuilder_ == null) {
                        ensurePartitionKeyIsMutable();
                        partitionKey_.remove(index);
                        onChanged();
                    } else {
                        partitionKeyBuilder_.remove(index);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder getPartitionKeyBuilder(
                        int index) {
                    return getPartitionKeyFieldBuilder().getBuilder(index);
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getPartitionKeyOrBuilder(
                        int index) {
                    if (partitionKeyBuilder_ == null) {
                        return partitionKey_.get(index);  } else {
                        return partitionKeyBuilder_.getMessageOrBuilder(index);
                    }
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getPartitionKeyOrBuilderList() {
                    if (partitionKeyBuilder_ != null) {
                        return partitionKeyBuilder_.getMessageOrBuilderList();
                    } else {
                        return java.util.Collections.unmodifiableList(partitionKey_);
                    }
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addPartitionKeyBuilder() {
                    return getPartitionKeyFieldBuilder().addBuilder(
                            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addPartitionKeyBuilder(
                        int index) {
                    return getPartitionKeyFieldBuilder().addBuilder(
                            index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *需要备份的分区，该分区必须没有被LV引用
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey partition_key = 2;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder>
                getPartitionKeyBuilderList() {
                    return getPartitionKeyFieldBuilder().getBuilderList();
                }
                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getPartitionKeyFieldBuilder() {
                    if (partitionKeyBuilder_ == null) {
                        partitionKeyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                                cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>(
                                partitionKey_,
                                ((bitField0_ & 0x00000002) == 0x00000002),
                                getParentForChildren(),
                                isClean());
                        partitionKey_ = null;
                    }
                    return partitionKeyBuilder_;
                }

                private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> lvKey_ =
                        java.util.Collections.emptyList();
                private void ensureLvKeyIsMutable() {
                    if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                        lvKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>(lvKey_);
                        bitField0_ |= 0x00000004;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder> lvKeyBuilder_;

                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getLvKeyList() {
                    if (lvKeyBuilder_ == null) {
                        return java.util.Collections.unmodifiableList(lvKey_);
                    } else {
                        return lvKeyBuilder_.getMessageList();
                    }
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public int getLvKeyCount() {
                    if (lvKeyBuilder_ == null) {
                        return lvKey_.size();
                    } else {
                        return lvKeyBuilder_.getCount();
                    }
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getLvKey(int index) {
                    if (lvKeyBuilder_ == null) {
                        return lvKey_.get(index);
                    } else {
                        return lvKeyBuilder_.getMessage(index);
                    }
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder setLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (lvKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureLvKeyIsMutable();
                        lvKey_.set(index, value);
                        onChanged();
                    } else {
                        lvKeyBuilder_.setMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder setLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (lvKeyBuilder_ == null) {
                        ensureLvKeyIsMutable();
                        lvKey_.set(index, builderForValue.build());
                        onChanged();
                    } else {
                        lvKeyBuilder_.setMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder addLvKey(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (lvKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureLvKeyIsMutable();
                        lvKey_.add(value);
                        onChanged();
                    } else {
                        lvKeyBuilder_.addMessage(value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder addLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (lvKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureLvKeyIsMutable();
                        lvKey_.add(index, value);
                        onChanged();
                    } else {
                        lvKeyBuilder_.addMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder addLvKey(
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (lvKeyBuilder_ == null) {
                        ensureLvKeyIsMutable();
                        lvKey_.add(builderForValue.build());
                        onChanged();
                    } else {
                        lvKeyBuilder_.addMessage(builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder addLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (lvKeyBuilder_ == null) {
                        ensureLvKeyIsMutable();
                        lvKey_.add(index, builderForValue.build());
                        onChanged();
                    } else {
                        lvKeyBuilder_.addMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder addAllLvKey(
                        Iterable<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> values) {
                    if (lvKeyBuilder_ == null) {
                        ensureLvKeyIsMutable();
                        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                                values, lvKey_);
                        onChanged();
                    } else {
                        lvKeyBuilder_.addAllMessages(values);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder clearLvKey() {
                    if (lvKeyBuilder_ == null) {
                        lvKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000004);
                        onChanged();
                    } else {
                        lvKeyBuilder_.clear();
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public Builder removeLvKey(int index) {
                    if (lvKeyBuilder_ == null) {
                        ensureLvKeyIsMutable();
                        lvKey_.remove(index);
                        onChanged();
                    } else {
                        lvKeyBuilder_.remove(index);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder getLvKeyBuilder(
                        int index) {
                    return getLvKeyFieldBuilder().getBuilder(index);
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getLvKeyOrBuilder(
                        int index) {
                    if (lvKeyBuilder_ == null) {
                        return lvKey_.get(index);  } else {
                        return lvKeyBuilder_.getMessageOrBuilder(index);
                    }
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getLvKeyOrBuilderList() {
                    if (lvKeyBuilder_ != null) {
                        return lvKeyBuilder_.getMessageOrBuilderList();
                    } else {
                        return java.util.Collections.unmodifiableList(lvKey_);
                    }
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addLvKeyBuilder() {
                    return getLvKeyFieldBuilder().addBuilder(
                            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addLvKeyBuilder(
                        int index) {
                    return getLvKeyFieldBuilder().addBuilder(
                            index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *需要备份的逻辑卷
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey lv_key = 3;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder>
                getLvKeyBuilderList() {
                    return getLvKeyFieldBuilder().getBuilderList();
                }
                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getLvKeyFieldBuilder() {
                    if (lvKeyBuilder_ == null) {
                        lvKeyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                                cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>(
                                lvKey_,
                                ((bitField0_ & 0x00000004) == 0x00000004),
                                getParentForChildren(),
                                isClean());
                        lvKey_ = null;
                    }
                    return lvKeyBuilder_;
                }

                private java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> driftLvKey_ =
                        java.util.Collections.emptyList();
                private void ensureDriftLvKeyIsMutable() {
                    if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                        driftLvKey_ = new java.util.ArrayList<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey>(driftLvKey_);
                        bitField0_ |= 0x00000008;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder> driftLvKeyBuilder_;

                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> getDriftLvKeyList() {
                    if (driftLvKeyBuilder_ == null) {
                        return java.util.Collections.unmodifiableList(driftLvKey_);
                    } else {
                        return driftLvKeyBuilder_.getMessageList();
                    }
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public int getDriftLvKeyCount() {
                    if (driftLvKeyBuilder_ == null) {
                        return driftLvKey_.size();
                    } else {
                        return driftLvKeyBuilder_.getCount();
                    }
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getDriftLvKey(int index) {
                    if (driftLvKeyBuilder_ == null) {
                        return driftLvKey_.get(index);
                    } else {
                        return driftLvKeyBuilder_.getMessage(index);
                    }
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder setDriftLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (driftLvKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureDriftLvKeyIsMutable();
                        driftLvKey_.set(index, value);
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.setMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder setDriftLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (driftLvKeyBuilder_ == null) {
                        ensureDriftLvKeyIsMutable();
                        driftLvKey_.set(index, builderForValue.build());
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.setMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder addDriftLvKey(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (driftLvKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureDriftLvKeyIsMutable();
                        driftLvKey_.add(value);
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.addMessage(value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder addDriftLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                    if (driftLvKeyBuilder_ == null) {
                        if (value == null) {
                            throw new NullPointerException();
                        }
                        ensureDriftLvKeyIsMutable();
                        driftLvKey_.add(index, value);
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.addMessage(index, value);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder addDriftLvKey(
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (driftLvKeyBuilder_ == null) {
                        ensureDriftLvKeyIsMutable();
                        driftLvKey_.add(builderForValue.build());
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.addMessage(builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder addDriftLvKey(
                        int index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                    if (driftLvKeyBuilder_ == null) {
                        ensureDriftLvKeyIsMutable();
                        driftLvKey_.add(index, builderForValue.build());
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.addMessage(index, builderForValue.build());
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder addAllDriftLvKey(
                        Iterable<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey> values) {
                    if (driftLvKeyBuilder_ == null) {
                        ensureDriftLvKeyIsMutable();
                        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                                values, driftLvKey_);
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.addAllMessages(values);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder clearDriftLvKey() {
                    if (driftLvKeyBuilder_ == null) {
                        driftLvKey_ = java.util.Collections.emptyList();
                        bitField0_ = (bitField0_ & ~0x00000008);
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.clear();
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public Builder removeDriftLvKey(int index) {
                    if (driftLvKeyBuilder_ == null) {
                        ensureDriftLvKeyIsMutable();
                        driftLvKey_.remove(index);
                        onChanged();
                    } else {
                        driftLvKeyBuilder_.remove(index);
                    }
                    return this;
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder getDriftLvKeyBuilder(
                        int index) {
                    return getDriftLvKeyFieldBuilder().getBuilder(index);
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getDriftLvKeyOrBuilder(
                        int index) {
                    if (driftLvKeyBuilder_ == null) {
                        return driftLvKey_.get(index);  } else {
                        return driftLvKeyBuilder_.getMessageOrBuilder(index);
                    }
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public java.util.List<? extends cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getDriftLvKeyOrBuilderList() {
                    if (driftLvKeyBuilder_ != null) {
                        return driftLvKeyBuilder_.getMessageOrBuilderList();
                    } else {
                        return java.util.Collections.unmodifiableList(driftLvKey_);
                    }
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addDriftLvKeyBuilder() {
                    return getDriftLvKeyFieldBuilder().addBuilder(
                            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder addDriftLvKeyBuilder(
                        int index) {
                    return getDriftLvKeyFieldBuilder().addBuilder(
                            index, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance());
                }
                /**
                 * <pre>
                 *允许漂移的块设备信息：对于某些集群而言(如 mscs)，存在共享的块设备同一时间只在
                 *一个节点进行读写, 为了确保对该类集群正常备份，当发现某个块设备不可读时，
                 *允许通过其他节点进行备份, 目前只考虑卷(实际应该不存在磁盘和分区漂移的情况)
                 * </pre>
                 *
                 * <code>repeated .one2data.rbtmqmsgcli.common.BlockDeviceKey drift_lv_key = 4;</code>
                 */
                public java.util.List<cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder>
                getDriftLvKeyBuilderList() {
                    return getDriftLvKeyFieldBuilder().getBuilderList();
                }
                private com.google.protobuf.RepeatedFieldBuilderV3<
                        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
                getDriftLvKeyFieldBuilder() {
                    if (driftLvKeyBuilder_ == null) {
                        driftLvKeyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                                cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>(
                                driftLvKey_,
                                ((bitField0_ & 0x00000008) == 0x00000008),
                                getParentForChildren(),
                                isClean());
                        driftLvKey_ = null;
                    }
                    return driftLvKeyBuilder_;
                }
                public final Builder setUnknownFields(
                        final com.google.protobuf.UnknownFieldSet unknownFields) {
                    return this;
                }

                public final Builder mergeUnknownFields(
                        final com.google.protobuf.UnknownFieldSet unknownFields) {
                    return this;
                }


                // @@protoc_insertion_point(builder_scope:one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware)
            }

            // @@protoc_insertion_point(class_scope:one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware)
            private static final cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware DEFAULT_INSTANCE;
            static {
                DEFAULT_INSTANCE = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware();
            }

            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static final com.google.protobuf.Parser<NeedBackupHardware>
                    PARSER = new com.google.protobuf.AbstractParser<NeedBackupHardware>() {
                public NeedBackupHardware parsePartialFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws com.google.protobuf.InvalidProtocolBufferException {
                    return new NeedBackupHardware(input, extensionRegistry);
                }
            };

            public static com.google.protobuf.Parser<NeedBackupHardware> parser() {
                return PARSER;
            }

            @Override
            public com.google.protobuf.Parser<NeedBackupHardware> getParserForType() {
                return PARSER;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

        }

        public interface ExtendParameterOrBuilder extends
                // @@protoc_insertion_point(interface_extends:one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter)
                com.google.protobuf.MessageOrBuilder {

            /**
             * <pre>
             * 加密类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
             */
            int getEncryptTypeValue();
            /**
             * <pre>
             * 加密类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType getEncryptType();

            /**
             * <pre>
             * 压缩类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
             */
            int getCompressTypeValue();
            /**
             * <pre>
             * 压缩类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType getCompressType();

            /**
             * <pre>
             *最大会话个数，即最大允许并行备份的块设备个数
             *由于备份以磁盘为单位，因此客户端实际开启的会话个数不会超过要备份的磁盘个数
             * </pre>
             *
             * <code>optional int32 max_session_cnt = 3;</code>
             */
            int getMaxSessionCnt();

            /**
             * <pre>
             *是否备份优先，当为 true 时，客户端会尽可能的进行并行备份，此时 max_session_cnt 无效
             * </pre>
             *
             * <code>optional bool is_backup_priority = 4;</code>
             */
            boolean getIsBackupPriority();

            /**
             * <pre>
             *备份限速,单位:Kbps,若不限速则为:0
             * </pre>
             *
             * <code>optional int64 limit_backup_speed_Kbps = 5;</code>
             */
            long getLimitBackupSpeedKbps();

            /**
             * <pre>
             *针对同步：
             *是否强制同步完成所有数据直至没有新的增量，默认false
             *为true时客户端将一直从驱动拿数据直至下次拿不到数据才停止，可能导致同步一直无法停止
             * </pre>
             *
             * <code>optional bool sync_force_sync_clean = 6;</code>
             */
            boolean getSyncForceSyncClean();

            /**
             * <pre>
             *同步前是否不刷缓存,默认false,即刷缓存，当为true时，同步可能会很快结束，但是系统中最新的数据
             *不一定被同步到存储，验证机/接管机起来后可能看到的是较旧的时间点的数据
             * </pre>
             *
             * <code>optional bool sync_no_flush_cache = 7;</code>
             */
            boolean getSyncNoFlushCache();

            /**
             * <pre>
             *同步脚本，用于在每次同步前执行
             * </pre>
             *
             * <code>optional string sync_script = 8;</code>
             */
            String getSyncScript();
            /**
             * <pre>
             *同步脚本，用于在每次同步前执行
             * </pre>
             *
             * <code>optional string sync_script = 8;</code>
             */
            com.google.protobuf.ByteString
            getSyncScriptBytes();

            /**
             * <pre>
             *磁盘限速,针对单块磁盘,单位:Kbps,若不限速则为0
             * </pre>
             *
             * <code>optional int64 limit_disk_speed_Kbps = 9;</code>
             */
            long getLimitDiskSpeedKbps();

            /**
             * <pre>
             * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
             * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
             *   linux: 0:sda,sdb,sdc
             *   windows: 0:0,1,2
             * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
             *   linux: 1:/,/home,/data
             * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
             * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
             * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
             * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
             * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
             * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
             * </pre>
             *
             * <code>optional string sync_priority = 10;</code>
             */
            String getSyncPriority();
            /**
             * <pre>
             * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
             * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
             *   linux: 0:sda,sdb,sdc
             *   windows: 0:0,1,2
             * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
             *   linux: 1:/,/home,/data
             * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
             * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
             * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
             * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
             * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
             * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
             * </pre>
             *
             * <code>optional string sync_priority = 10;</code>
             */
            com.google.protobuf.ByteString
            getSyncPriorityBytes();

            /**
             * <pre>
             * 自动同步：当该字段为 true 时表示 web 不再主动发送同步动作，备份客户端将基于上次的同步动作及配置
             * 自动进行同步，需要注意以下几点：
             * 1. web 需要确保提供的备份相关信息能够被重复使用
             * 2. web 可以通过主动发送暂停取消客户端的自动同步
             * 3. 客户端不会持久化该配置，即当客户端重启后该配置自动失效
             * </pre>
             *
             * <code>optional bool auto_sync = 11;</code>
             */
            boolean getAutoSync();

            /**
             * <pre>
             * 是否重置备份进度，默认false，即不重置进度，下次备份时从上次的中断点继续备份，当为true时, 客户端将重新备份
             * </pre>
             *
             * <code>optional bool reset_progress = 12;</code>
             */
            boolean getResetProgress();

            /**
             * <pre>
             * 同步轮询次数，web 发起的一次同步，客户端内部默认会从驱动轮询很多次数据，当每次轮询到的数据量较大时会导致同步
             * 耗时较长，web 可通过该字段控制客户端同步轮询次数以降低同步耗时
             * </pre>
             *
             * <code>optional int32 sync_poll_cnt = 13;</code>
             */
            int getSyncPollCnt();

            /**
             * <pre>
             * 是否使用合并 bitmap 的方式备份集群，默认 false, Oracle RAC 集群优先设为 true，MSCS 集群应设为 false
             * </pre>
             *
             * <code>optional bool merge_bitmap = 14;</code>
             */
            boolean getMergeBitmap();

            /**
             * <pre>
             * 压缩等级
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
             */
            int getCompressLevelValue();
            /**
             * <pre>
             * 压缩等级
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
             */
            cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel getCompressLevel();
        }
        /**
         * <pre>
         * 扩展参数，用于控制备份客户端内部行为
         * </pre>
         *
         * Protobuf type {@code one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter}
         */
        public  static final class ExtendParameter extends
                com.google.protobuf.GeneratedMessageV3 implements
                // @@protoc_insertion_point(message_implements:one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter)
                ExtendParameterOrBuilder {
            // Use ExtendParameter.newBuilder() to construct.
            private ExtendParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
                super(builder);
            }
            private ExtendParameter() {
                encryptType_ = 0;
                compressType_ = 0;
                maxSessionCnt_ = 0;
                isBackupPriority_ = false;
                limitBackupSpeedKbps_ = 0L;
                syncForceSyncClean_ = false;
                syncNoFlushCache_ = false;
                syncScript_ = "";
                limitDiskSpeedKbps_ = 0L;
                syncPriority_ = "";
                autoSync_ = false;
                resetProgress_ = false;
                syncPollCnt_ = 0;
                mergeBitmap_ = false;
                compressLevel_ = 0;
            }

            @Override
            public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
                return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
            }
            private ExtendParameter(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                this();
                int mutable_bitField0_ = 0;
                try {
                    boolean done = false;
                    while (!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            default: {
                                if (!input.skipField(tag)) {
                                    done = true;
                                }
                                break;
                            }
                            case 8: {
                                int rawValue = input.readEnum();

                                encryptType_ = rawValue;
                                break;
                            }
                            case 16: {
                                int rawValue = input.readEnum();

                                compressType_ = rawValue;
                                break;
                            }
                            case 24: {

                                maxSessionCnt_ = input.readInt32();
                                break;
                            }
                            case 32: {

                                isBackupPriority_ = input.readBool();
                                break;
                            }
                            case 40: {

                                limitBackupSpeedKbps_ = input.readInt64();
                                break;
                            }
                            case 48: {

                                syncForceSyncClean_ = input.readBool();
                                break;
                            }
                            case 56: {

                                syncNoFlushCache_ = input.readBool();
                                break;
                            }
                            case 66: {
                                String s = input.readStringRequireUtf8();

                                syncScript_ = s;
                                break;
                            }
                            case 72: {

                                limitDiskSpeedKbps_ = input.readInt64();
                                break;
                            }
                            case 82: {
                                String s = input.readStringRequireUtf8();

                                syncPriority_ = s;
                                break;
                            }
                            case 88: {

                                autoSync_ = input.readBool();
                                break;
                            }
                            case 96: {

                                resetProgress_ = input.readBool();
                                break;
                            }
                            case 104: {

                                syncPollCnt_ = input.readInt32();
                                break;
                            }
                            case 112: {

                                mergeBitmap_ = input.readBool();
                                break;
                            }
                            case 120: {
                                int rawValue = input.readEnum();

                                compressLevel_ = rawValue;
                                break;
                            }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (java.io.IOException e) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(
                            e).setUnfinishedMessage(this);
                } finally {
                    makeExtensionsImmutable();
                }
            }
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder.class);
            }

            public static final int ENCRYPT_TYPE_FIELD_NUMBER = 1;
            private int encryptType_;
            /**
             * <pre>
             * 加密类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
             */
            public int getEncryptTypeValue() {
                return encryptType_;
            }
            /**
             * <pre>
             * 加密类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType getEncryptType() {
                cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType result = cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType.valueOf(encryptType_);
                return result == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType.UNRECOGNIZED : result;
            }

            public static final int COMPRESS_TYPE_FIELD_NUMBER = 2;
            private int compressType_;
            /**
             * <pre>
             * 压缩类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
             */
            public int getCompressTypeValue() {
                return compressType_;
            }
            /**
             * <pre>
             * 压缩类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType getCompressType() {
                cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType result = cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType.valueOf(compressType_);
                return result == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType.UNRECOGNIZED : result;
            }

            public static final int MAX_SESSION_CNT_FIELD_NUMBER = 3;
            private int maxSessionCnt_;
            /**
             * <pre>
             *最大会话个数，即最大允许并行备份的块设备个数
             *由于备份以磁盘为单位，因此客户端实际开启的会话个数不会超过要备份的磁盘个数
             * </pre>
             *
             * <code>optional int32 max_session_cnt = 3;</code>
             */
            public int getMaxSessionCnt() {
                return maxSessionCnt_;
            }

            public static final int IS_BACKUP_PRIORITY_FIELD_NUMBER = 4;
            private boolean isBackupPriority_;
            /**
             * <pre>
             *是否备份优先，当为 true 时，客户端会尽可能的进行并行备份，此时 max_session_cnt 无效
             * </pre>
             *
             * <code>optional bool is_backup_priority = 4;</code>
             */
            public boolean getIsBackupPriority() {
                return isBackupPriority_;
            }

            public static final int LIMIT_BACKUP_SPEED_KBPS_FIELD_NUMBER = 5;
            private long limitBackupSpeedKbps_;
            /**
             * <pre>
             *备份限速,单位:Kbps,若不限速则为:0
             * </pre>
             *
             * <code>optional int64 limit_backup_speed_Kbps = 5;</code>
             */
            public long getLimitBackupSpeedKbps() {
                return limitBackupSpeedKbps_;
            }

            public static final int SYNC_FORCE_SYNC_CLEAN_FIELD_NUMBER = 6;
            private boolean syncForceSyncClean_;
            /**
             * <pre>
             *针对同步：
             *是否强制同步完成所有数据直至没有新的增量，默认false
             *为true时客户端将一直从驱动拿数据直至下次拿不到数据才停止，可能导致同步一直无法停止
             * </pre>
             *
             * <code>optional bool sync_force_sync_clean = 6;</code>
             */
            public boolean getSyncForceSyncClean() {
                return syncForceSyncClean_;
            }

            public static final int SYNC_NO_FLUSH_CACHE_FIELD_NUMBER = 7;
            private boolean syncNoFlushCache_;
            /**
             * <pre>
             *同步前是否不刷缓存,默认false,即刷缓存，当为true时，同步可能会很快结束，但是系统中最新的数据
             *不一定被同步到存储，验证机/接管机起来后可能看到的是较旧的时间点的数据
             * </pre>
             *
             * <code>optional bool sync_no_flush_cache = 7;</code>
             */
            public boolean getSyncNoFlushCache() {
                return syncNoFlushCache_;
            }

            public static final int SYNC_SCRIPT_FIELD_NUMBER = 8;
            private volatile Object syncScript_;
            /**
             * <pre>
             *同步脚本，用于在每次同步前执行
             * </pre>
             *
             * <code>optional string sync_script = 8;</code>
             */
            public String getSyncScript() {
                Object ref = syncScript_;
                if (ref instanceof String) {
                    return (String) ref;
                } else {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    syncScript_ = s;
                    return s;
                }
            }
            /**
             * <pre>
             *同步脚本，用于在每次同步前执行
             * </pre>
             *
             * <code>optional string sync_script = 8;</code>
             */
            public com.google.protobuf.ByteString
            getSyncScriptBytes() {
                Object ref = syncScript_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    syncScript_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            public static final int LIMIT_DISK_SPEED_KBPS_FIELD_NUMBER = 9;
            private long limitDiskSpeedKbps_;
            /**
             * <pre>
             *磁盘限速,针对单块磁盘,单位:Kbps,若不限速则为0
             * </pre>
             *
             * <code>optional int64 limit_disk_speed_Kbps = 9;</code>
             */
            public long getLimitDiskSpeedKbps() {
                return limitDiskSpeedKbps_;
            }

            public static final int SYNC_PRIORITY_FIELD_NUMBER = 10;
            private volatile Object syncPriority_;
            /**
             * <pre>
             * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
             * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
             *   linux: 0:sda,sdb,sdc
             *   windows: 0:0,1,2
             * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
             *   linux: 1:/,/home,/data
             * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
             * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
             * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
             * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
             * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
             * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
             * </pre>
             *
             * <code>optional string sync_priority = 10;</code>
             */
            public String getSyncPriority() {
                Object ref = syncPriority_;
                if (ref instanceof String) {
                    return (String) ref;
                } else {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    syncPriority_ = s;
                    return s;
                }
            }
            /**
             * <pre>
             * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
             * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
             *   linux: 0:sda,sdb,sdc
             *   windows: 0:0,1,2
             * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
             *   linux: 1:/,/home,/data
             * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
             * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
             * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
             * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
             * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
             * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
             * </pre>
             *
             * <code>optional string sync_priority = 10;</code>
             */
            public com.google.protobuf.ByteString
            getSyncPriorityBytes() {
                Object ref = syncPriority_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    syncPriority_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            public static final int AUTO_SYNC_FIELD_NUMBER = 11;
            private boolean autoSync_;
            /**
             * <pre>
             * 自动同步：当该字段为 true 时表示 web 不再主动发送同步动作，备份客户端将基于上次的同步动作及配置
             * 自动进行同步，需要注意以下几点：
             * 1. web 需要确保提供的备份相关信息能够被重复使用
             * 2. web 可以通过主动发送暂停取消客户端的自动同步
             * 3. 客户端不会持久化该配置，即当客户端重启后该配置自动失效
             * </pre>
             *
             * <code>optional bool auto_sync = 11;</code>
             */
            public boolean getAutoSync() {
                return autoSync_;
            }

            public static final int RESET_PROGRESS_FIELD_NUMBER = 12;
            private boolean resetProgress_;
            /**
             * <pre>
             * 是否重置备份进度，默认false，即不重置进度，下次备份时从上次的中断点继续备份，当为true时, 客户端将重新备份
             * </pre>
             *
             * <code>optional bool reset_progress = 12;</code>
             */
            public boolean getResetProgress() {
                return resetProgress_;
            }

            public static final int SYNC_POLL_CNT_FIELD_NUMBER = 13;
            private int syncPollCnt_;
            /**
             * <pre>
             * 同步轮询次数，web 发起的一次同步，客户端内部默认会从驱动轮询很多次数据，当每次轮询到的数据量较大时会导致同步
             * 耗时较长，web 可通过该字段控制客户端同步轮询次数以降低同步耗时
             * </pre>
             *
             * <code>optional int32 sync_poll_cnt = 13;</code>
             */
            public int getSyncPollCnt() {
                return syncPollCnt_;
            }

            public static final int MERGE_BITMAP_FIELD_NUMBER = 14;
            private boolean mergeBitmap_;
            /**
             * <pre>
             * 是否使用合并 bitmap 的方式备份集群，默认 false, Oracle RAC 集群优先设为 true，MSCS 集群应设为 false
             * </pre>
             *
             * <code>optional bool merge_bitmap = 14;</code>
             */
            public boolean getMergeBitmap() {
                return mergeBitmap_;
            }

            public static final int COMPRESS_LEVEL_FIELD_NUMBER = 15;
            private int compressLevel_;
            /**
             * <pre>
             * 压缩等级
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
             */
            public int getCompressLevelValue() {
                return compressLevel_;
            }
            /**
             * <pre>
             * 压缩等级
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel getCompressLevel() {
                cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel result = cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel.valueOf(compressLevel_);
                return result == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel.UNRECOGNIZED : result;
            }

            private byte memoizedIsInitialized = -1;
            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized == 1) return true;
                if (isInitialized == 0) return false;

                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(com.google.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                if (encryptType_ != cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType.ET_NONE.getNumber()) {
                    output.writeEnum(1, encryptType_);
                }
                if (compressType_ != cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType.CT_NONE.getNumber()) {
                    output.writeEnum(2, compressType_);
                }
                if (maxSessionCnt_ != 0) {
                    output.writeInt32(3, maxSessionCnt_);
                }
                if (isBackupPriority_ != false) {
                    output.writeBool(4, isBackupPriority_);
                }
                if (limitBackupSpeedKbps_ != 0L) {
                    output.writeInt64(5, limitBackupSpeedKbps_);
                }
                if (syncForceSyncClean_ != false) {
                    output.writeBool(6, syncForceSyncClean_);
                }
                if (syncNoFlushCache_ != false) {
                    output.writeBool(7, syncNoFlushCache_);
                }
                if (!getSyncScriptBytes().isEmpty()) {
                    com.google.protobuf.GeneratedMessageV3.writeString(output, 8, syncScript_);
                }
                if (limitDiskSpeedKbps_ != 0L) {
                    output.writeInt64(9, limitDiskSpeedKbps_);
                }
                if (!getSyncPriorityBytes().isEmpty()) {
                    com.google.protobuf.GeneratedMessageV3.writeString(output, 10, syncPriority_);
                }
                if (autoSync_ != false) {
                    output.writeBool(11, autoSync_);
                }
                if (resetProgress_ != false) {
                    output.writeBool(12, resetProgress_);
                }
                if (syncPollCnt_ != 0) {
                    output.writeInt32(13, syncPollCnt_);
                }
                if (mergeBitmap_ != false) {
                    output.writeBool(14, mergeBitmap_);
                }
                if (compressLevel_ != cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel.CL_NONE.getNumber()) {
                    output.writeEnum(15, compressLevel_);
                }
            }

            public int getSerializedSize() {
                int size = memoizedSize;
                if (size != -1) return size;

                size = 0;
                if (encryptType_ != cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType.ET_NONE.getNumber()) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeEnumSize(1, encryptType_);
                }
                if (compressType_ != cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType.CT_NONE.getNumber()) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeEnumSize(2, compressType_);
                }
                if (maxSessionCnt_ != 0) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32Size(3, maxSessionCnt_);
                }
                if (isBackupPriority_ != false) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeBoolSize(4, isBackupPriority_);
                }
                if (limitBackupSpeedKbps_ != 0L) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt64Size(5, limitBackupSpeedKbps_);
                }
                if (syncForceSyncClean_ != false) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeBoolSize(6, syncForceSyncClean_);
                }
                if (syncNoFlushCache_ != false) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeBoolSize(7, syncNoFlushCache_);
                }
                if (!getSyncScriptBytes().isEmpty()) {
                    size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, syncScript_);
                }
                if (limitDiskSpeedKbps_ != 0L) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt64Size(9, limitDiskSpeedKbps_);
                }
                if (!getSyncPriorityBytes().isEmpty()) {
                    size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, syncPriority_);
                }
                if (autoSync_ != false) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeBoolSize(11, autoSync_);
                }
                if (resetProgress_ != false) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeBoolSize(12, resetProgress_);
                }
                if (syncPollCnt_ != 0) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32Size(13, syncPollCnt_);
                }
                if (mergeBitmap_ != false) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeBoolSize(14, mergeBitmap_);
                }
                if (compressLevel_ != cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel.CL_NONE.getNumber()) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeEnumSize(15, compressLevel_);
                }
                memoizedSize = size;
                return size;
            }

            private static final long serialVersionUID = 0L;
            @Override
            public boolean equals(final Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter)) {
                    return super.equals(obj);
                }
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter other = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter) obj;

                boolean result = true;
                result = result && encryptType_ == other.encryptType_;
                result = result && compressType_ == other.compressType_;
                result = result && (getMaxSessionCnt()
                        == other.getMaxSessionCnt());
                result = result && (getIsBackupPriority()
                        == other.getIsBackupPriority());
                result = result && (getLimitBackupSpeedKbps()
                        == other.getLimitBackupSpeedKbps());
                result = result && (getSyncForceSyncClean()
                        == other.getSyncForceSyncClean());
                result = result && (getSyncNoFlushCache()
                        == other.getSyncNoFlushCache());
                result = result && getSyncScript()
                        .equals(other.getSyncScript());
                result = result && (getLimitDiskSpeedKbps()
                        == other.getLimitDiskSpeedKbps());
                result = result && getSyncPriority()
                        .equals(other.getSyncPriority());
                result = result && (getAutoSync()
                        == other.getAutoSync());
                result = result && (getResetProgress()
                        == other.getResetProgress());
                result = result && (getSyncPollCnt()
                        == other.getSyncPollCnt());
                result = result && (getMergeBitmap()
                        == other.getMergeBitmap());
                result = result && compressLevel_ == other.compressLevel_;
                return result;
            }

            @Override
            public int hashCode() {
                if (memoizedHashCode != 0) {
                    return memoizedHashCode;
                }
                int hash = 41;
                hash = (19 * hash) + getDescriptorForType().hashCode();
                hash = (37 * hash) + ENCRYPT_TYPE_FIELD_NUMBER;
                hash = (53 * hash) + encryptType_;
                hash = (37 * hash) + COMPRESS_TYPE_FIELD_NUMBER;
                hash = (53 * hash) + compressType_;
                hash = (37 * hash) + MAX_SESSION_CNT_FIELD_NUMBER;
                hash = (53 * hash) + getMaxSessionCnt();
                hash = (37 * hash) + IS_BACKUP_PRIORITY_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                        getIsBackupPriority());
                hash = (37 * hash) + LIMIT_BACKUP_SPEED_KBPS_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                        getLimitBackupSpeedKbps());
                hash = (37 * hash) + SYNC_FORCE_SYNC_CLEAN_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                        getSyncForceSyncClean());
                hash = (37 * hash) + SYNC_NO_FLUSH_CACHE_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                        getSyncNoFlushCache());
                hash = (37 * hash) + SYNC_SCRIPT_FIELD_NUMBER;
                hash = (53 * hash) + getSyncScript().hashCode();
                hash = (37 * hash) + LIMIT_DISK_SPEED_KBPS_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                        getLimitDiskSpeedKbps());
                hash = (37 * hash) + SYNC_PRIORITY_FIELD_NUMBER;
                hash = (53 * hash) + getSyncPriority().hashCode();
                hash = (37 * hash) + AUTO_SYNC_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                        getAutoSync());
                hash = (37 * hash) + RESET_PROGRESS_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                        getResetProgress());
                hash = (37 * hash) + SYNC_POLL_CNT_FIELD_NUMBER;
                hash = (53 * hash) + getSyncPollCnt();
                hash = (37 * hash) + MERGE_BITMAP_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                        getMergeBitmap());
                hash = (37 * hash) + COMPRESS_LEVEL_FIELD_NUMBER;
                hash = (53 * hash) + compressLevel_;
                hash = (29 * hash) + unknownFields.hashCode();
                memoizedHashCode = hash;
                return hash;
            }

            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(
                    com.google.protobuf.ByteString data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(
                    com.google.protobuf.ByteString data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(
                    byte[] data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return PARSER.parseFrom(data, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseDelimitedFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(
                    com.google.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input);
            }
            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return com.google.protobuf.GeneratedMessageV3
                        .parseWithIOException(PARSER, input, extensionRegistry);
            }

            public Builder newBuilderForType() { return newBuilder(); }
            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }
            public static Builder newBuilder(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter prototype) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
            }
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE
                        ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            protected Builder newBuilderForType(
                    BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }
            /**
             * <pre>
             * 扩展参数，用于控制备份客户端内部行为
             * </pre>
             *
             * Protobuf type {@code one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter}
             */
            public static final class Builder extends
                    com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                    // @@protoc_insertion_point(builder_implements:one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter)
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameterOrBuilder {
                public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_descriptor;
                }

                protected FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_fieldAccessorTable
                            .ensureFieldAccessorsInitialized(
                                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder.class);
                }

                // Construct using cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(
                        BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }
                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessageV3
                            .alwaysUseFieldBuilders) {
                    }
                }
                public Builder clear() {
                    super.clear();
                    encryptType_ = 0;

                    compressType_ = 0;

                    maxSessionCnt_ = 0;

                    isBackupPriority_ = false;

                    limitBackupSpeedKbps_ = 0L;

                    syncForceSyncClean_ = false;

                    syncNoFlushCache_ = false;

                    syncScript_ = "";

                    limitDiskSpeedKbps_ = 0L;

                    syncPriority_ = "";

                    autoSync_ = false;

                    resetProgress_ = false;

                    syncPollCnt_ = 0;

                    mergeBitmap_ = false;

                    compressLevel_ = 0;

                    return this;
                }

                public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_descriptor;
                }

                public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter getDefaultInstanceForType() {
                    return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.getDefaultInstance();
                }

                public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter build() {
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter buildPartial() {
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter result = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter(this);
                    result.encryptType_ = encryptType_;
                    result.compressType_ = compressType_;
                    result.maxSessionCnt_ = maxSessionCnt_;
                    result.isBackupPriority_ = isBackupPriority_;
                    result.limitBackupSpeedKbps_ = limitBackupSpeedKbps_;
                    result.syncForceSyncClean_ = syncForceSyncClean_;
                    result.syncNoFlushCache_ = syncNoFlushCache_;
                    result.syncScript_ = syncScript_;
                    result.limitDiskSpeedKbps_ = limitDiskSpeedKbps_;
                    result.syncPriority_ = syncPriority_;
                    result.autoSync_ = autoSync_;
                    result.resetProgress_ = resetProgress_;
                    result.syncPollCnt_ = syncPollCnt_;
                    result.mergeBitmap_ = mergeBitmap_;
                    result.compressLevel_ = compressLevel_;
                    onBuilt();
                    return result;
                }

                public Builder clone() {
                    return (Builder) super.clone();
                }
                public Builder setField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return (Builder) super.setField(field, value);
                }
                public Builder clearField(
                        com.google.protobuf.Descriptors.FieldDescriptor field) {
                    return (Builder) super.clearField(field);
                }
                public Builder clearOneof(
                        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                    return (Builder) super.clearOneof(oneof);
                }
                public Builder setRepeatedField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        int index, Object value) {
                    return (Builder) super.setRepeatedField(field, index, value);
                }
                public Builder addRepeatedField(
                        com.google.protobuf.Descriptors.FieldDescriptor field,
                        Object value) {
                    return (Builder) super.addRepeatedField(field, value);
                }
                public Builder mergeFrom(com.google.protobuf.Message other) {
                    if (other instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter) {
                        return mergeFrom((cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter)other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter other) {
                    if (other == cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.getDefaultInstance()) return this;
                    if (other.encryptType_ != 0) {
                        setEncryptTypeValue(other.getEncryptTypeValue());
                    }
                    if (other.compressType_ != 0) {
                        setCompressTypeValue(other.getCompressTypeValue());
                    }
                    if (other.getMaxSessionCnt() != 0) {
                        setMaxSessionCnt(other.getMaxSessionCnt());
                    }
                    if (other.getIsBackupPriority() != false) {
                        setIsBackupPriority(other.getIsBackupPriority());
                    }
                    if (other.getLimitBackupSpeedKbps() != 0L) {
                        setLimitBackupSpeedKbps(other.getLimitBackupSpeedKbps());
                    }
                    if (other.getSyncForceSyncClean() != false) {
                        setSyncForceSyncClean(other.getSyncForceSyncClean());
                    }
                    if (other.getSyncNoFlushCache() != false) {
                        setSyncNoFlushCache(other.getSyncNoFlushCache());
                    }
                    if (!other.getSyncScript().isEmpty()) {
                        syncScript_ = other.syncScript_;
                        onChanged();
                    }
                    if (other.getLimitDiskSpeedKbps() != 0L) {
                        setLimitDiskSpeedKbps(other.getLimitDiskSpeedKbps());
                    }
                    if (!other.getSyncPriority().isEmpty()) {
                        syncPriority_ = other.syncPriority_;
                        onChanged();
                    }
                    if (other.getAutoSync() != false) {
                        setAutoSync(other.getAutoSync());
                    }
                    if (other.getResetProgress() != false) {
                        setResetProgress(other.getResetProgress());
                    }
                    if (other.getSyncPollCnt() != 0) {
                        setSyncPollCnt(other.getSyncPollCnt());
                    }
                    if (other.getMergeBitmap() != false) {
                        setMergeBitmap(other.getMergeBitmap());
                    }
                    if (other.compressLevel_ != 0) {
                        setCompressLevelValue(other.getCompressLevelValue());
                    }
                    onChanged();
                    return this;
                }

                public final boolean isInitialized() {
                    return true;
                }

                public Builder mergeFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter parsedMessage = null;
                    try {
                        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                        parsedMessage = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter) e.getUnfinishedMessage();
                        throw e.unwrapIOException();
                    } finally {
                        if (parsedMessage != null) {
                            mergeFrom(parsedMessage);
                        }
                    }
                    return this;
                }

                private int encryptType_ = 0;
                /**
                 * <pre>
                 * 加密类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
                 */
                public int getEncryptTypeValue() {
                    return encryptType_;
                }
                /**
                 * <pre>
                 * 加密类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
                 */
                public Builder setEncryptTypeValue(int value) {
                    encryptType_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 加密类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType getEncryptType() {
                    cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType result = cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType.valueOf(encryptType_);
                    return result == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType.UNRECOGNIZED : result;
                }
                /**
                 * <pre>
                 * 加密类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
                 */
                public Builder setEncryptType(cn.keptdata.one2data.header.message.protobuf.common.Common.EncryptType value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    encryptType_ = value.getNumber();
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 加密类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.EncryptType encrypt_type = 1;</code>
                 */
                public Builder clearEncryptType() {

                    encryptType_ = 0;
                    onChanged();
                    return this;
                }

                private int compressType_ = 0;
                /**
                 * <pre>
                 * 压缩类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
                 */
                public int getCompressTypeValue() {
                    return compressType_;
                }
                /**
                 * <pre>
                 * 压缩类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
                 */
                public Builder setCompressTypeValue(int value) {
                    compressType_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 压缩类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType getCompressType() {
                    cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType result = cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType.valueOf(compressType_);
                    return result == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType.UNRECOGNIZED : result;
                }
                /**
                 * <pre>
                 * 压缩类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
                 */
                public Builder setCompressType(cn.keptdata.one2data.header.message.protobuf.common.Common.CompressType value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    compressType_ = value.getNumber();
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 压缩类型
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressType compress_type = 2;</code>
                 */
                public Builder clearCompressType() {

                    compressType_ = 0;
                    onChanged();
                    return this;
                }

                private int maxSessionCnt_ ;
                /**
                 * <pre>
                 *最大会话个数，即最大允许并行备份的块设备个数
                 *由于备份以磁盘为单位，因此客户端实际开启的会话个数不会超过要备份的磁盘个数
                 * </pre>
                 *
                 * <code>optional int32 max_session_cnt = 3;</code>
                 */
                public int getMaxSessionCnt() {
                    return maxSessionCnt_;
                }
                /**
                 * <pre>
                 *最大会话个数，即最大允许并行备份的块设备个数
                 *由于备份以磁盘为单位，因此客户端实际开启的会话个数不会超过要备份的磁盘个数
                 * </pre>
                 *
                 * <code>optional int32 max_session_cnt = 3;</code>
                 */
                public Builder setMaxSessionCnt(int value) {

                    maxSessionCnt_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *最大会话个数，即最大允许并行备份的块设备个数
                 *由于备份以磁盘为单位，因此客户端实际开启的会话个数不会超过要备份的磁盘个数
                 * </pre>
                 *
                 * <code>optional int32 max_session_cnt = 3;</code>
                 */
                public Builder clearMaxSessionCnt() {

                    maxSessionCnt_ = 0;
                    onChanged();
                    return this;
                }

                private boolean isBackupPriority_ ;
                /**
                 * <pre>
                 *是否备份优先，当为 true 时，客户端会尽可能的进行并行备份，此时 max_session_cnt 无效
                 * </pre>
                 *
                 * <code>optional bool is_backup_priority = 4;</code>
                 */
                public boolean getIsBackupPriority() {
                    return isBackupPriority_;
                }
                /**
                 * <pre>
                 *是否备份优先，当为 true 时，客户端会尽可能的进行并行备份，此时 max_session_cnt 无效
                 * </pre>
                 *
                 * <code>optional bool is_backup_priority = 4;</code>
                 */
                public Builder setIsBackupPriority(boolean value) {

                    isBackupPriority_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *是否备份优先，当为 true 时，客户端会尽可能的进行并行备份，此时 max_session_cnt 无效
                 * </pre>
                 *
                 * <code>optional bool is_backup_priority = 4;</code>
                 */
                public Builder clearIsBackupPriority() {

                    isBackupPriority_ = false;
                    onChanged();
                    return this;
                }

                private long limitBackupSpeedKbps_ ;
                /**
                 * <pre>
                 *备份限速,单位:Kbps,若不限速则为:0
                 * </pre>
                 *
                 * <code>optional int64 limit_backup_speed_Kbps = 5;</code>
                 */
                public long getLimitBackupSpeedKbps() {
                    return limitBackupSpeedKbps_;
                }
                /**
                 * <pre>
                 *备份限速,单位:Kbps,若不限速则为:0
                 * </pre>
                 *
                 * <code>optional int64 limit_backup_speed_Kbps = 5;</code>
                 */
                public Builder setLimitBackupSpeedKbps(long value) {

                    limitBackupSpeedKbps_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *备份限速,单位:Kbps,若不限速则为:0
                 * </pre>
                 *
                 * <code>optional int64 limit_backup_speed_Kbps = 5;</code>
                 */
                public Builder clearLimitBackupSpeedKbps() {

                    limitBackupSpeedKbps_ = 0L;
                    onChanged();
                    return this;
                }

                private boolean syncForceSyncClean_ ;
                /**
                 * <pre>
                 *针对同步：
                 *是否强制同步完成所有数据直至没有新的增量，默认false
                 *为true时客户端将一直从驱动拿数据直至下次拿不到数据才停止，可能导致同步一直无法停止
                 * </pre>
                 *
                 * <code>optional bool sync_force_sync_clean = 6;</code>
                 */
                public boolean getSyncForceSyncClean() {
                    return syncForceSyncClean_;
                }
                /**
                 * <pre>
                 *针对同步：
                 *是否强制同步完成所有数据直至没有新的增量，默认false
                 *为true时客户端将一直从驱动拿数据直至下次拿不到数据才停止，可能导致同步一直无法停止
                 * </pre>
                 *
                 * <code>optional bool sync_force_sync_clean = 6;</code>
                 */
                public Builder setSyncForceSyncClean(boolean value) {

                    syncForceSyncClean_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *针对同步：
                 *是否强制同步完成所有数据直至没有新的增量，默认false
                 *为true时客户端将一直从驱动拿数据直至下次拿不到数据才停止，可能导致同步一直无法停止
                 * </pre>
                 *
                 * <code>optional bool sync_force_sync_clean = 6;</code>
                 */
                public Builder clearSyncForceSyncClean() {

                    syncForceSyncClean_ = false;
                    onChanged();
                    return this;
                }

                private boolean syncNoFlushCache_ ;
                /**
                 * <pre>
                 *同步前是否不刷缓存,默认false,即刷缓存，当为true时，同步可能会很快结束，但是系统中最新的数据
                 *不一定被同步到存储，验证机/接管机起来后可能看到的是较旧的时间点的数据
                 * </pre>
                 *
                 * <code>optional bool sync_no_flush_cache = 7;</code>
                 */
                public boolean getSyncNoFlushCache() {
                    return syncNoFlushCache_;
                }
                /**
                 * <pre>
                 *同步前是否不刷缓存,默认false,即刷缓存，当为true时，同步可能会很快结束，但是系统中最新的数据
                 *不一定被同步到存储，验证机/接管机起来后可能看到的是较旧的时间点的数据
                 * </pre>
                 *
                 * <code>optional bool sync_no_flush_cache = 7;</code>
                 */
                public Builder setSyncNoFlushCache(boolean value) {

                    syncNoFlushCache_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *同步前是否不刷缓存,默认false,即刷缓存，当为true时，同步可能会很快结束，但是系统中最新的数据
                 *不一定被同步到存储，验证机/接管机起来后可能看到的是较旧的时间点的数据
                 * </pre>
                 *
                 * <code>optional bool sync_no_flush_cache = 7;</code>
                 */
                public Builder clearSyncNoFlushCache() {

                    syncNoFlushCache_ = false;
                    onChanged();
                    return this;
                }

                private Object syncScript_ = "";
                /**
                 * <pre>
                 *同步脚本，用于在每次同步前执行
                 * </pre>
                 *
                 * <code>optional string sync_script = 8;</code>
                 */
                public String getSyncScript() {
                    Object ref = syncScript_;
                    if (!(ref instanceof String)) {
                        com.google.protobuf.ByteString bs =
                                (com.google.protobuf.ByteString) ref;
                        String s = bs.toStringUtf8();
                        syncScript_ = s;
                        return s;
                    } else {
                        return (String) ref;
                    }
                }
                /**
                 * <pre>
                 *同步脚本，用于在每次同步前执行
                 * </pre>
                 *
                 * <code>optional string sync_script = 8;</code>
                 */
                public com.google.protobuf.ByteString
                getSyncScriptBytes() {
                    Object ref = syncScript_;
                    if (ref instanceof String) {
                        com.google.protobuf.ByteString b =
                                com.google.protobuf.ByteString.copyFromUtf8(
                                        (String) ref);
                        syncScript_ = b;
                        return b;
                    } else {
                        return (com.google.protobuf.ByteString) ref;
                    }
                }
                /**
                 * <pre>
                 *同步脚本，用于在每次同步前执行
                 * </pre>
                 *
                 * <code>optional string sync_script = 8;</code>
                 */
                public Builder setSyncScript(
                        String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    syncScript_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *同步脚本，用于在每次同步前执行
                 * </pre>
                 *
                 * <code>optional string sync_script = 8;</code>
                 */
                public Builder clearSyncScript() {

                    syncScript_ = getDefaultInstance().getSyncScript();
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *同步脚本，用于在每次同步前执行
                 * </pre>
                 *
                 * <code>optional string sync_script = 8;</code>
                 */
                public Builder setSyncScriptBytes(
                        com.google.protobuf.ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    checkByteStringIsUtf8(value);

                    syncScript_ = value;
                    onChanged();
                    return this;
                }

                private long limitDiskSpeedKbps_ ;
                /**
                 * <pre>
                 *磁盘限速,针对单块磁盘,单位:Kbps,若不限速则为0
                 * </pre>
                 *
                 * <code>optional int64 limit_disk_speed_Kbps = 9;</code>
                 */
                public long getLimitDiskSpeedKbps() {
                    return limitDiskSpeedKbps_;
                }
                /**
                 * <pre>
                 *磁盘限速,针对单块磁盘,单位:Kbps,若不限速则为0
                 * </pre>
                 *
                 * <code>optional int64 limit_disk_speed_Kbps = 9;</code>
                 */
                public Builder setLimitDiskSpeedKbps(long value) {

                    limitDiskSpeedKbps_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 *磁盘限速,针对单块磁盘,单位:Kbps,若不限速则为0
                 * </pre>
                 *
                 * <code>optional int64 limit_disk_speed_Kbps = 9;</code>
                 */
                public Builder clearLimitDiskSpeedKbps() {

                    limitDiskSpeedKbps_ = 0L;
                    onChanged();
                    return this;
                }

                private Object syncPriority_ = "";
                /**
                 * <pre>
                 * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
                 * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
                 *   linux: 0:sda,sdb,sdc
                 *   windows: 0:0,1,2
                 * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
                 *   linux: 1:/,/home,/data
                 * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
                 * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
                 * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
                 * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
                 * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
                 * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
                 * </pre>
                 *
                 * <code>optional string sync_priority = 10;</code>
                 */
                public String getSyncPriority() {
                    Object ref = syncPriority_;
                    if (!(ref instanceof String)) {
                        com.google.protobuf.ByteString bs =
                                (com.google.protobuf.ByteString) ref;
                        String s = bs.toStringUtf8();
                        syncPriority_ = s;
                        return s;
                    } else {
                        return (String) ref;
                    }
                }
                /**
                 * <pre>
                 * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
                 * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
                 *   linux: 0:sda,sdb,sdc
                 *   windows: 0:0,1,2
                 * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
                 *   linux: 1:/,/home,/data
                 * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
                 * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
                 * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
                 * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
                 * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
                 * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
                 * </pre>
                 *
                 * <code>optional string sync_priority = 10;</code>
                 */
                public com.google.protobuf.ByteString
                getSyncPriorityBytes() {
                    Object ref = syncPriority_;
                    if (ref instanceof String) {
                        com.google.protobuf.ByteString b =
                                com.google.protobuf.ByteString.copyFromUtf8(
                                        (String) ref);
                        syncPriority_ = b;
                        return b;
                    } else {
                        return (com.google.protobuf.ByteString) ref;
                    }
                }
                /**
                 * <pre>
                 * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
                 * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
                 *   linux: 0:sda,sdb,sdc
                 *   windows: 0:0,1,2
                 * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
                 *   linux: 1:/,/home,/data
                 * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
                 * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
                 * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
                 * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
                 * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
                 * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
                 * </pre>
                 *
                 * <code>optional string sync_priority = 10;</code>
                 */
                public Builder setSyncPriority(
                        String value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    syncPriority_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
                 * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
                 *   linux: 0:sda,sdb,sdc
                 *   windows: 0:0,1,2
                 * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
                 *   linux: 1:/,/home,/data
                 * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
                 * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
                 * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
                 * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
                 * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
                 * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
                 * </pre>
                 *
                 * <code>optional string sync_priority = 10;</code>
                 */
                public Builder clearSyncPriority() {

                    syncPriority_ = getDefaultInstance().getSyncPriority();
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 同步优先级，默认为空, 格式: &lt;type:&gt;&lt;name1&gt;[,name2...]，其中
                 * type=0 时, name 表示磁盘名(linux)或编号(windows), 例如:
                 *   linux: 0:sda,sdb,sdc
                 *   windows: 0:0,1,2
                 * type=1 时, name 表示挂载点，此类型只支持 linux 平台，例如:
                 *   linux: 1:/,/home,/data
                 * 当只配置一个 name 时表示该 name 将最后被同步，当配置多个 name 时，配置中的 name 按配置的顺序同步，
                 * 即前面的先同步，后面的后同步，此时未配置的 name 将有机会和已配置的 name 并行同步(依赖实际允许的会
                 * 话数量，当只有一个会话时，配置的 name 永远在未配置的之后同步)
                 * 该配置主要应用于数据库备份场景：一般数据库文件和日志文件是分布在不同的磁盘上，此时可以通过指定优先级，
                 * 让数据库文件对应的块设备在日志文件对应的块设备之后同步，当每次同步完，日志的数据永远都比数据库文件新，
                 * 当验证或接管时，数据库系统进程就可以通过较新的日志文件恢复数据库文件以保证数据库的一致性，但是反之则不行。
                 * </pre>
                 *
                 * <code>optional string sync_priority = 10;</code>
                 */
                public Builder setSyncPriorityBytes(
                        com.google.protobuf.ByteString value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    checkByteStringIsUtf8(value);

                    syncPriority_ = value;
                    onChanged();
                    return this;
                }

                private boolean autoSync_ ;
                /**
                 * <pre>
                 * 自动同步：当该字段为 true 时表示 web 不再主动发送同步动作，备份客户端将基于上次的同步动作及配置
                 * 自动进行同步，需要注意以下几点：
                 * 1. web 需要确保提供的备份相关信息能够被重复使用
                 * 2. web 可以通过主动发送暂停取消客户端的自动同步
                 * 3. 客户端不会持久化该配置，即当客户端重启后该配置自动失效
                 * </pre>
                 *
                 * <code>optional bool auto_sync = 11;</code>
                 */
                public boolean getAutoSync() {
                    return autoSync_;
                }
                /**
                 * <pre>
                 * 自动同步：当该字段为 true 时表示 web 不再主动发送同步动作，备份客户端将基于上次的同步动作及配置
                 * 自动进行同步，需要注意以下几点：
                 * 1. web 需要确保提供的备份相关信息能够被重复使用
                 * 2. web 可以通过主动发送暂停取消客户端的自动同步
                 * 3. 客户端不会持久化该配置，即当客户端重启后该配置自动失效
                 * </pre>
                 *
                 * <code>optional bool auto_sync = 11;</code>
                 */
                public Builder setAutoSync(boolean value) {

                    autoSync_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 自动同步：当该字段为 true 时表示 web 不再主动发送同步动作，备份客户端将基于上次的同步动作及配置
                 * 自动进行同步，需要注意以下几点：
                 * 1. web 需要确保提供的备份相关信息能够被重复使用
                 * 2. web 可以通过主动发送暂停取消客户端的自动同步
                 * 3. 客户端不会持久化该配置，即当客户端重启后该配置自动失效
                 * </pre>
                 *
                 * <code>optional bool auto_sync = 11;</code>
                 */
                public Builder clearAutoSync() {

                    autoSync_ = false;
                    onChanged();
                    return this;
                }

                private boolean resetProgress_ ;
                /**
                 * <pre>
                 * 是否重置备份进度，默认false，即不重置进度，下次备份时从上次的中断点继续备份，当为true时, 客户端将重新备份
                 * </pre>
                 *
                 * <code>optional bool reset_progress = 12;</code>
                 */
                public boolean getResetProgress() {
                    return resetProgress_;
                }
                /**
                 * <pre>
                 * 是否重置备份进度，默认false，即不重置进度，下次备份时从上次的中断点继续备份，当为true时, 客户端将重新备份
                 * </pre>
                 *
                 * <code>optional bool reset_progress = 12;</code>
                 */
                public Builder setResetProgress(boolean value) {

                    resetProgress_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 是否重置备份进度，默认false，即不重置进度，下次备份时从上次的中断点继续备份，当为true时, 客户端将重新备份
                 * </pre>
                 *
                 * <code>optional bool reset_progress = 12;</code>
                 */
                public Builder clearResetProgress() {

                    resetProgress_ = false;
                    onChanged();
                    return this;
                }

                private int syncPollCnt_ ;
                /**
                 * <pre>
                 * 同步轮询次数，web 发起的一次同步，客户端内部默认会从驱动轮询很多次数据，当每次轮询到的数据量较大时会导致同步
                 * 耗时较长，web 可通过该字段控制客户端同步轮询次数以降低同步耗时
                 * </pre>
                 *
                 * <code>optional int32 sync_poll_cnt = 13;</code>
                 */
                public int getSyncPollCnt() {
                    return syncPollCnt_;
                }
                /**
                 * <pre>
                 * 同步轮询次数，web 发起的一次同步，客户端内部默认会从驱动轮询很多次数据，当每次轮询到的数据量较大时会导致同步
                 * 耗时较长，web 可通过该字段控制客户端同步轮询次数以降低同步耗时
                 * </pre>
                 *
                 * <code>optional int32 sync_poll_cnt = 13;</code>
                 */
                public Builder setSyncPollCnt(int value) {

                    syncPollCnt_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 同步轮询次数，web 发起的一次同步，客户端内部默认会从驱动轮询很多次数据，当每次轮询到的数据量较大时会导致同步
                 * 耗时较长，web 可通过该字段控制客户端同步轮询次数以降低同步耗时
                 * </pre>
                 *
                 * <code>optional int32 sync_poll_cnt = 13;</code>
                 */
                public Builder clearSyncPollCnt() {

                    syncPollCnt_ = 0;
                    onChanged();
                    return this;
                }

                private boolean mergeBitmap_ ;
                /**
                 * <pre>
                 * 是否使用合并 bitmap 的方式备份集群，默认 false, Oracle RAC 集群优先设为 true，MSCS 集群应设为 false
                 * </pre>
                 *
                 * <code>optional bool merge_bitmap = 14;</code>
                 */
                public boolean getMergeBitmap() {
                    return mergeBitmap_;
                }
                /**
                 * <pre>
                 * 是否使用合并 bitmap 的方式备份集群，默认 false, Oracle RAC 集群优先设为 true，MSCS 集群应设为 false
                 * </pre>
                 *
                 * <code>optional bool merge_bitmap = 14;</code>
                 */
                public Builder setMergeBitmap(boolean value) {

                    mergeBitmap_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 是否使用合并 bitmap 的方式备份集群，默认 false, Oracle RAC 集群优先设为 true，MSCS 集群应设为 false
                 * </pre>
                 *
                 * <code>optional bool merge_bitmap = 14;</code>
                 */
                public Builder clearMergeBitmap() {

                    mergeBitmap_ = false;
                    onChanged();
                    return this;
                }

                private int compressLevel_ = 0;
                /**
                 * <pre>
                 * 压缩等级
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
                 */
                public int getCompressLevelValue() {
                    return compressLevel_;
                }
                /**
                 * <pre>
                 * 压缩等级
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
                 */
                public Builder setCompressLevelValue(int value) {
                    compressLevel_ = value;
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 压缩等级
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
                 */
                public cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel getCompressLevel() {
                    cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel result = cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel.valueOf(compressLevel_);
                    return result == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel.UNRECOGNIZED : result;
                }
                /**
                 * <pre>
                 * 压缩等级
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
                 */
                public Builder setCompressLevel(cn.keptdata.one2data.header.message.protobuf.common.Common.CompressLevel value) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    compressLevel_ = value.getNumber();
                    onChanged();
                    return this;
                }
                /**
                 * <pre>
                 * 压缩等级
                 * </pre>
                 *
                 * <code>optional .one2data.rbtmqmsgcli.common.CompressLevel compress_level = 15;</code>
                 */
                public Builder clearCompressLevel() {

                    compressLevel_ = 0;
                    onChanged();
                    return this;
                }
                public final Builder setUnknownFields(
                        final com.google.protobuf.UnknownFieldSet unknownFields) {
                    return this;
                }

                public final Builder mergeUnknownFields(
                        final com.google.protobuf.UnknownFieldSet unknownFields) {
                    return this;
                }


                // @@protoc_insertion_point(builder_scope:one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter)
            }

            // @@protoc_insertion_point(class_scope:one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter)
            private static final cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter DEFAULT_INSTANCE;
            static {
                DEFAULT_INSTANCE = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter();
            }

            public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            private static final com.google.protobuf.Parser<ExtendParameter>
                    PARSER = new com.google.protobuf.AbstractParser<ExtendParameter>() {
                public ExtendParameter parsePartialFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws com.google.protobuf.InvalidProtocolBufferException {
                    return new ExtendParameter(input, extensionRegistry);
                }
            };

            public static com.google.protobuf.Parser<ExtendParameter> parser() {
                return PARSER;
            }

            @Override
            public com.google.protobuf.Parser<ExtendParameter> getParserForType() {
                return PARSER;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

        }

        public static final int BACKUP_TASK_UUID_FIELD_NUMBER = 1;
        private volatile Object backupTaskUuid_;
        /**
         * <pre>
         *备份配置所属的备份任务唯一ID
         * </pre>
         *
         * <code>optional string backup_task_uuid = 1;</code>
         */
        public String getBackupTaskUuid() {
            Object ref = backupTaskUuid_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                backupTaskUuid_ = s;
                return s;
            }
        }
        /**
         * <pre>
         *备份配置所属的备份任务唯一ID
         * </pre>
         *
         * <code>optional string backup_task_uuid = 1;</code>
         */
        public com.google.protobuf.ByteString
        getBackupTaskUuidBytes() {
            Object ref = backupTaskUuid_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                backupTaskUuid_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int NEED_BACKUP_HARDWARE_FIELD_NUMBER = 2;
        private cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware needBackupHardware_;
        /**
         * <pre>
         *需要备份的设备硬件信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
         */
        public boolean hasNeedBackupHardware() {
            return needBackupHardware_ != null;
        }
        /**
         * <pre>
         *需要备份的设备硬件信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware getNeedBackupHardware() {
            return needBackupHardware_ == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.getDefaultInstance() : needBackupHardware_;
        }
        /**
         * <pre>
         *需要备份的设备硬件信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardwareOrBuilder getNeedBackupHardwareOrBuilder() {
            return getNeedBackupHardware();
        }

        public static final int NETWORK_INFO_FIELD_NUMBER = 3;
        private cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo networkInfo_;
        /**
         * <pre>
         *网络配置信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
         */
        public boolean hasNetworkInfo() {
            return networkInfo_ != null;
        }
        /**
         * <pre>
         *网络配置信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo getNetworkInfo() {
            return networkInfo_ == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.getDefaultInstance() : networkInfo_;
        }
        /**
         * <pre>
         *网络配置信息
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfoOrBuilder getNetworkInfoOrBuilder() {
            return getNetworkInfo();
        }

        public static final int EXTEND_PARAS_FIELD_NUMBER = 4;
        private cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter extendParas_;
        /**
         * <pre>
         * 扩展参数
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
         */
        public boolean hasExtendParas() {
            return extendParas_ != null;
        }
        /**
         * <pre>
         * 扩展参数
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter getExtendParas() {
            return extendParas_ == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.getDefaultInstance() : extendParas_;
        }
        /**
         * <pre>
         * 扩展参数
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameterOrBuilder getExtendParasOrBuilder() {
            return getExtendParas();
        }

        public static final int STORAGE_CONVERT_SERVICE_PORT_FIELD_NUMBER = 5;
        private int storageConvertServicePort_;
        /**
         * <pre>
         *存储 Convert 服务端口
         * </pre>
         *
         * <code>optional int32 storage_convert_service_port = 5;</code>
         */
        public int getStorageConvertServicePort() {
            return storageConvertServicePort_;
        }

        public static final int CHANNEL_TYPE_FIELD_NUMBER = 6;
        private int channelType_;
        /**
         * <pre>
         *通道类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
         */
        public int getChannelTypeValue() {
            return channelType_;
        }
        /**
         * <pre>
         *通道类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType getChannelType() {
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType.valueOf(channelType_);
            return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType.UNRECOGNIZED : result;
        }

        public static final int DATA_STORAGE_GRANULARITY_FIELD_NUMBER = 7;
        private int dataStorageGranularity_;
        /**
         * <pre>
         *数据存储粒度
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
         */
        public int getDataStorageGranularityValue() {
            return dataStorageGranularity_;
        }
        /**
         * <pre>
         *数据存储粒度
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity getDataStorageGranularity() {
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity.valueOf(dataStorageGranularity_);
            return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity.UNRECOGNIZED : result;
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getBackupTaskUuidBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, backupTaskUuid_);
            }
            if (needBackupHardware_ != null) {
                output.writeMessage(2, getNeedBackupHardware());
            }
            if (networkInfo_ != null) {
                output.writeMessage(3, getNetworkInfo());
            }
            if (extendParas_ != null) {
                output.writeMessage(4, getExtendParas());
            }
            if (storageConvertServicePort_ != 0) {
                output.writeInt32(5, storageConvertServicePort_);
            }
            if (channelType_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType.CT_TCP.getNumber()) {
                output.writeEnum(6, channelType_);
            }
            if (dataStorageGranularity_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity.DSG_SECOND.getNumber()) {
                output.writeEnum(7, dataStorageGranularity_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getBackupTaskUuidBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, backupTaskUuid_);
            }
            if (needBackupHardware_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getNeedBackupHardware());
            }
            if (networkInfo_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, getNetworkInfo());
            }
            if (extendParas_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, getExtendParas());
            }
            if (storageConvertServicePort_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(5, storageConvertServicePort_);
            }
            if (channelType_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType.CT_TCP.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(6, channelType_);
            }
            if (dataStorageGranularity_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity.DSG_SECOND.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(7, dataStorageGranularity_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig)) {
                return super.equals(obj);
            }
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig other = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig) obj;

            boolean result = true;
            result = result && getBackupTaskUuid()
                    .equals(other.getBackupTaskUuid());
            result = result && (hasNeedBackupHardware() == other.hasNeedBackupHardware());
            if (hasNeedBackupHardware()) {
                result = result && getNeedBackupHardware()
                        .equals(other.getNeedBackupHardware());
            }
            result = result && (hasNetworkInfo() == other.hasNetworkInfo());
            if (hasNetworkInfo()) {
                result = result && getNetworkInfo()
                        .equals(other.getNetworkInfo());
            }
            result = result && (hasExtendParas() == other.hasExtendParas());
            if (hasExtendParas()) {
                result = result && getExtendParas()
                        .equals(other.getExtendParas());
            }
            result = result && (getStorageConvertServicePort()
                    == other.getStorageConvertServicePort());
            result = result && channelType_ == other.channelType_;
            result = result && dataStorageGranularity_ == other.dataStorageGranularity_;
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptorForType().hashCode();
            hash = (37 * hash) + BACKUP_TASK_UUID_FIELD_NUMBER;
            hash = (53 * hash) + getBackupTaskUuid().hashCode();
            if (hasNeedBackupHardware()) {
                hash = (37 * hash) + NEED_BACKUP_HARDWARE_FIELD_NUMBER;
                hash = (53 * hash) + getNeedBackupHardware().hashCode();
            }
            if (hasNetworkInfo()) {
                hash = (37 * hash) + NETWORK_INFO_FIELD_NUMBER;
                hash = (53 * hash) + getNetworkInfo().hashCode();
            }
            if (hasExtendParas()) {
                hash = (37 * hash) + EXTEND_PARAS_FIELD_NUMBER;
                hash = (53 * hash) + getExtendParas().hashCode();
            }
            hash = (37 * hash) + STORAGE_CONVERT_SERVICE_PORT_FIELD_NUMBER;
            hash = (53 * hash) + getStorageConvertServicePort();
            hash = (37 * hash) + CHANNEL_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + channelType_;
            hash = (37 * hash) + DATA_STORAGE_GRANULARITY_FIELD_NUMBER;
            hash = (53 * hash) + dataStorageGranularity_;
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * <pre>
         *备份配置信息
         * </pre>
         *
         * Protobuf type {@code one2data.rbtmqmsgcli.client.BackupConfig}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:one2data.rbtmqmsgcli.client.BackupConfig)
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfigOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.Builder.class);
            }

            // Construct using cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }
            public Builder clear() {
                super.clear();
                backupTaskUuid_ = "";

                if (needBackupHardwareBuilder_ == null) {
                    needBackupHardware_ = null;
                } else {
                    needBackupHardware_ = null;
                    needBackupHardwareBuilder_ = null;
                }
                if (networkInfoBuilder_ == null) {
                    networkInfo_ = null;
                } else {
                    networkInfo_ = null;
                    networkInfoBuilder_ = null;
                }
                if (extendParasBuilder_ == null) {
                    extendParas_ = null;
                } else {
                    extendParas_ = null;
                    extendParasBuilder_ = null;
                }
                storageConvertServicePort_ = 0;

                channelType_ = 0;

                dataStorageGranularity_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig getDefaultInstanceForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.getDefaultInstance();
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig build() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig buildPartial() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig result = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig(this);
                result.backupTaskUuid_ = backupTaskUuid_;
                if (needBackupHardwareBuilder_ == null) {
                    result.needBackupHardware_ = needBackupHardware_;
                } else {
                    result.needBackupHardware_ = needBackupHardwareBuilder_.build();
                }
                if (networkInfoBuilder_ == null) {
                    result.networkInfo_ = networkInfo_;
                } else {
                    result.networkInfo_ = networkInfoBuilder_.build();
                }
                if (extendParasBuilder_ == null) {
                    result.extendParas_ = extendParas_;
                } else {
                    result.extendParas_ = extendParasBuilder_.build();
                }
                result.storageConvertServicePort_ = storageConvertServicePort_;
                result.channelType_ = channelType_;
                result.dataStorageGranularity_ = dataStorageGranularity_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig) {
                    return mergeFrom((cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig other) {
                if (other == cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.getDefaultInstance()) return this;
                if (!other.getBackupTaskUuid().isEmpty()) {
                    backupTaskUuid_ = other.backupTaskUuid_;
                    onChanged();
                }
                if (other.hasNeedBackupHardware()) {
                    mergeNeedBackupHardware(other.getNeedBackupHardware());
                }
                if (other.hasNetworkInfo()) {
                    mergeNetworkInfo(other.getNetworkInfo());
                }
                if (other.hasExtendParas()) {
                    mergeExtendParas(other.getExtendParas());
                }
                if (other.getStorageConvertServicePort() != 0) {
                    setStorageConvertServicePort(other.getStorageConvertServicePort());
                }
                if (other.channelType_ != 0) {
                    setChannelTypeValue(other.getChannelTypeValue());
                }
                if (other.dataStorageGranularity_ != 0) {
                    setDataStorageGranularityValue(other.getDataStorageGranularityValue());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private Object backupTaskUuid_ = "";
            /**
             * <pre>
             *备份配置所属的备份任务唯一ID
             * </pre>
             *
             * <code>optional string backup_task_uuid = 1;</code>
             */
            public String getBackupTaskUuid() {
                Object ref = backupTaskUuid_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    backupTaskUuid_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             *备份配置所属的备份任务唯一ID
             * </pre>
             *
             * <code>optional string backup_task_uuid = 1;</code>
             */
            public com.google.protobuf.ByteString
            getBackupTaskUuidBytes() {
                Object ref = backupTaskUuid_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    backupTaskUuid_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <pre>
             *备份配置所属的备份任务唯一ID
             * </pre>
             *
             * <code>optional string backup_task_uuid = 1;</code>
             */
            public Builder setBackupTaskUuid(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                backupTaskUuid_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *备份配置所属的备份任务唯一ID
             * </pre>
             *
             * <code>optional string backup_task_uuid = 1;</code>
             */
            public Builder clearBackupTaskUuid() {

                backupTaskUuid_ = getDefaultInstance().getBackupTaskUuid();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *备份配置所属的备份任务唯一ID
             * </pre>
             *
             * <code>optional string backup_task_uuid = 1;</code>
             */
            public Builder setBackupTaskUuidBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                backupTaskUuid_ = value;
                onChanged();
                return this;
            }

            private cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware needBackupHardware_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardwareOrBuilder> needBackupHardwareBuilder_;
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public boolean hasNeedBackupHardware() {
                return needBackupHardwareBuilder_ != null || needBackupHardware_ != null;
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware getNeedBackupHardware() {
                if (needBackupHardwareBuilder_ == null) {
                    return needBackupHardware_ == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.getDefaultInstance() : needBackupHardware_;
                } else {
                    return needBackupHardwareBuilder_.getMessage();
                }
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public Builder setNeedBackupHardware(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware value) {
                if (needBackupHardwareBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    needBackupHardware_ = value;
                    onChanged();
                } else {
                    needBackupHardwareBuilder_.setMessage(value);
                }

                return this;
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public Builder setNeedBackupHardware(
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder builderForValue) {
                if (needBackupHardwareBuilder_ == null) {
                    needBackupHardware_ = builderForValue.build();
                    onChanged();
                } else {
                    needBackupHardwareBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public Builder mergeNeedBackupHardware(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware value) {
                if (needBackupHardwareBuilder_ == null) {
                    if (needBackupHardware_ != null) {
                        needBackupHardware_ =
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.newBuilder(needBackupHardware_).mergeFrom(value).buildPartial();
                    } else {
                        needBackupHardware_ = value;
                    }
                    onChanged();
                } else {
                    needBackupHardwareBuilder_.mergeFrom(value);
                }

                return this;
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public Builder clearNeedBackupHardware() {
                if (needBackupHardwareBuilder_ == null) {
                    needBackupHardware_ = null;
                    onChanged();
                } else {
                    needBackupHardware_ = null;
                    needBackupHardwareBuilder_ = null;
                }

                return this;
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder getNeedBackupHardwareBuilder() {

                onChanged();
                return getNeedBackupHardwareFieldBuilder().getBuilder();
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardwareOrBuilder getNeedBackupHardwareOrBuilder() {
                if (needBackupHardwareBuilder_ != null) {
                    return needBackupHardwareBuilder_.getMessageOrBuilder();
                } else {
                    return needBackupHardware_ == null ?
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.getDefaultInstance() : needBackupHardware_;
                }
            }
            /**
             * <pre>
             *需要备份的设备硬件信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.NeedBackupHardware need_backup_hardware = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardwareOrBuilder>
            getNeedBackupHardwareFieldBuilder() {
                if (needBackupHardwareBuilder_ == null) {
                    needBackupHardwareBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardware.Builder, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.NeedBackupHardwareOrBuilder>(
                            getNeedBackupHardware(),
                            getParentForChildren(),
                            isClean());
                    needBackupHardware_ = null;
                }
                return needBackupHardwareBuilder_;
            }

            private cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo networkInfo_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo, cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.Builder, cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfoOrBuilder> networkInfoBuilder_;
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public boolean hasNetworkInfo() {
                return networkInfoBuilder_ != null || networkInfo_ != null;
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo getNetworkInfo() {
                if (networkInfoBuilder_ == null) {
                    return networkInfo_ == null ? cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.getDefaultInstance() : networkInfo_;
                } else {
                    return networkInfoBuilder_.getMessage();
                }
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public Builder setNetworkInfo(cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo value) {
                if (networkInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    networkInfo_ = value;
                    onChanged();
                } else {
                    networkInfoBuilder_.setMessage(value);
                }

                return this;
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public Builder setNetworkInfo(
                    cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.Builder builderForValue) {
                if (networkInfoBuilder_ == null) {
                    networkInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    networkInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public Builder mergeNetworkInfo(cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo value) {
                if (networkInfoBuilder_ == null) {
                    if (networkInfo_ != null) {
                        networkInfo_ =
                                cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.newBuilder(networkInfo_).mergeFrom(value).buildPartial();
                    } else {
                        networkInfo_ = value;
                    }
                    onChanged();
                } else {
                    networkInfoBuilder_.mergeFrom(value);
                }

                return this;
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public Builder clearNetworkInfo() {
                if (networkInfoBuilder_ == null) {
                    networkInfo_ = null;
                    onChanged();
                } else {
                    networkInfo_ = null;
                    networkInfoBuilder_ = null;
                }

                return this;
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.Builder getNetworkInfoBuilder() {

                onChanged();
                return getNetworkInfoFieldBuilder().getBuilder();
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfoOrBuilder getNetworkInfoOrBuilder() {
                if (networkInfoBuilder_ != null) {
                    return networkInfoBuilder_.getMessageOrBuilder();
                } else {
                    return networkInfo_ == null ?
                            cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.getDefaultInstance() : networkInfo_;
                }
            }
            /**
             * <pre>
             *网络配置信息
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.NetworkInfo network_info = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo, cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.Builder, cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfoOrBuilder>
            getNetworkInfoFieldBuilder() {
                if (networkInfoBuilder_ == null) {
                    networkInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo, cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfo.Builder, cn.keptdata.one2data.header.message.protobuf.common.Common.NetworkInfoOrBuilder>(
                            getNetworkInfo(),
                            getParentForChildren(),
                            isClean());
                    networkInfo_ = null;
                }
                return networkInfoBuilder_;
            }

            private cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter extendParas_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameterOrBuilder> extendParasBuilder_;
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public boolean hasExtendParas() {
                return extendParasBuilder_ != null || extendParas_ != null;
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter getExtendParas() {
                if (extendParasBuilder_ == null) {
                    return extendParas_ == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.getDefaultInstance() : extendParas_;
                } else {
                    return extendParasBuilder_.getMessage();
                }
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public Builder setExtendParas(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter value) {
                if (extendParasBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    extendParas_ = value;
                    onChanged();
                } else {
                    extendParasBuilder_.setMessage(value);
                }

                return this;
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public Builder setExtendParas(
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder builderForValue) {
                if (extendParasBuilder_ == null) {
                    extendParas_ = builderForValue.build();
                    onChanged();
                } else {
                    extendParasBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public Builder mergeExtendParas(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter value) {
                if (extendParasBuilder_ == null) {
                    if (extendParas_ != null) {
                        extendParas_ =
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.newBuilder(extendParas_).mergeFrom(value).buildPartial();
                    } else {
                        extendParas_ = value;
                    }
                    onChanged();
                } else {
                    extendParasBuilder_.mergeFrom(value);
                }

                return this;
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public Builder clearExtendParas() {
                if (extendParasBuilder_ == null) {
                    extendParas_ = null;
                    onChanged();
                } else {
                    extendParas_ = null;
                    extendParasBuilder_ = null;
                }

                return this;
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder getExtendParasBuilder() {

                onChanged();
                return getExtendParasFieldBuilder().getBuilder();
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameterOrBuilder getExtendParasOrBuilder() {
                if (extendParasBuilder_ != null) {
                    return extendParasBuilder_.getMessageOrBuilder();
                } else {
                    return extendParas_ == null ?
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.getDefaultInstance() : extendParas_;
                }
            }
            /**
             * <pre>
             * 扩展参数
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ExtendParameter extend_paras = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameterOrBuilder>
            getExtendParasFieldBuilder() {
                if (extendParasBuilder_ == null) {
                    extendParasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameter.Builder, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ExtendParameterOrBuilder>(
                            getExtendParas(),
                            getParentForChildren(),
                            isClean());
                    extendParas_ = null;
                }
                return extendParasBuilder_;
            }

            private int storageConvertServicePort_ ;
            /**
             * <pre>
             *存储 Convert 服务端口
             * </pre>
             *
             * <code>optional int32 storage_convert_service_port = 5;</code>
             */
            public int getStorageConvertServicePort() {
                return storageConvertServicePort_;
            }
            /**
             * <pre>
             *存储 Convert 服务端口
             * </pre>
             *
             * <code>optional int32 storage_convert_service_port = 5;</code>
             */
            public Builder setStorageConvertServicePort(int value) {

                storageConvertServicePort_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *存储 Convert 服务端口
             * </pre>
             *
             * <code>optional int32 storage_convert_service_port = 5;</code>
             */
            public Builder clearStorageConvertServicePort() {

                storageConvertServicePort_ = 0;
                onChanged();
                return this;
            }

            private int channelType_ = 0;
            /**
             * <pre>
             *通道类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
             */
            public int getChannelTypeValue() {
                return channelType_;
            }
            /**
             * <pre>
             *通道类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
             */
            public Builder setChannelTypeValue(int value) {
                channelType_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *通道类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType getChannelType() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType.valueOf(channelType_);
                return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType.UNRECOGNIZED : result;
            }
            /**
             * <pre>
             *通道类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
             */
            public Builder setChannelType(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.ChannelType value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                channelType_ = value.getNumber();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *通道类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.ChannelType channel_type = 6;</code>
             */
            public Builder clearChannelType() {

                channelType_ = 0;
                onChanged();
                return this;
            }

            private int dataStorageGranularity_ = 0;
            /**
             * <pre>
             *数据存储粒度
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
             */
            public int getDataStorageGranularityValue() {
                return dataStorageGranularity_;
            }
            /**
             * <pre>
             *数据存储粒度
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
             */
            public Builder setDataStorageGranularityValue(int value) {
                dataStorageGranularity_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *数据存储粒度
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity getDataStorageGranularity() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity.valueOf(dataStorageGranularity_);
                return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity.UNRECOGNIZED : result;
            }
            /**
             * <pre>
             *数据存储粒度
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
             */
            public Builder setDataStorageGranularity(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig.DataStorageGranularity value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                dataStorageGranularity_ = value.getNumber();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *数据存储粒度
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.BackupConfig.DataStorageGranularity data_storage_granularity = 7;</code>
             */
            public Builder clearDataStorageGranularity() {

                dataStorageGranularity_ = 0;
                onChanged();
                return this;
            }
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:one2data.rbtmqmsgcli.client.BackupConfig)
        }

        // @@protoc_insertion_point(class_scope:one2data.rbtmqmsgcli.client.BackupConfig)
        private static final cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig();
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<BackupConfig>
                PARSER = new com.google.protobuf.AbstractParser<BackupConfig>() {
            public BackupConfig parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new BackupConfig(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<BackupConfig> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<BackupConfig> getParserForType() {
            return PARSER;
        }

        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.BackupConfig getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface SyncIndexInfoOrBuilder extends
            // @@protoc_insertion_point(interface_extends:one2data.rbtmqmsgcli.client.SyncIndexInfo)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         *关联的源磁盘唯一ID
         * </pre>
         *
         * <code>optional string src_harddisk_uuid = 1;</code>
         */
        String getSrcHarddiskUuid();
        /**
         * <pre>
         *关联的源磁盘唯一ID
         * </pre>
         *
         * <code>optional string src_harddisk_uuid = 1;</code>
         */
        com.google.protobuf.ByteString
        getSrcHarddiskUuidBytes();

        /**
         * <pre>
         *关联的源磁盘内部唯一标识
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
         */
        boolean hasSrcHarddiskKey();
        /**
         * <pre>
         *关联的源磁盘内部唯一标识
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getSrcHarddiskKey();
        /**
         * <pre>
         *关联的源磁盘内部唯一标识
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getSrcHarddiskKeyOrBuilder();

        /**
         * <pre>
         *关联的源磁盘内部索引
         * </pre>
         *
         * <code>optional int32 src_harddisk_idx = 3;</code>
         */
        int getSrcHarddiskIdx();

        /**
         * <pre>
         *当前磁盘关联的box uuid
         * </pre>
         *
         * <code>optional string box_uuid = 4;</code>
         */
        String getBoxUuid();
        /**
         * <pre>
         *当前磁盘关联的box uuid
         * </pre>
         *
         * <code>optional string box_uuid = 4;</code>
         */
        com.google.protobuf.ByteString
        getBoxUuidBytes();

        /**
         * <pre>
         *当前磁盘关联的box路径
         * </pre>
         *
         * <code>optional string box_path = 5;</code>
         */
        String getBoxPath();
        /**
         * <pre>
         *当前磁盘关联的box路径
         * </pre>
         *
         * <code>optional string box_path = 5;</code>
         */
        com.google.protobuf.ByteString
        getBoxPathBytes();

        /**
         * <pre>
         *当前磁盘关联的实时点快照全路径
         * </pre>
         *
         * <code>optional string realtime_qcow2_full_path = 6;</code>
         */
        String getRealtimeQcow2FullPath();
        /**
         * <pre>
         *当前磁盘关联的实时点快照全路径
         * </pre>
         *
         * <code>optional string realtime_qcow2_full_path = 6;</code>
         */
        com.google.protobuf.ByteString
        getRealtimeQcow2FullPathBytes();

        /**
         * <pre>
         *当前磁盘同步数据量
         * </pre>
         *
         * <code>optional int64 sync_len = 7;</code>
         */
        long getSyncLen();
    }
    /**
     * <pre>
     *同步索引信息
     * </pre>
     *
     * Protobuf type {@code one2data.rbtmqmsgcli.client.SyncIndexInfo}
     */
    public  static final class SyncIndexInfo extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:one2data.rbtmqmsgcli.client.SyncIndexInfo)
            SyncIndexInfoOrBuilder {
        // Use SyncIndexInfo.newBuilder() to construct.
        private SyncIndexInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
        private SyncIndexInfo() {
            srcHarddiskUuid_ = "";
            srcHarddiskIdx_ = 0;
            boxUuid_ = "";
            boxPath_ = "";
            realtimeQcow2FullPath_ = "";
            syncLen_ = 0L;
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }
        private SyncIndexInfo(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            srcHarddiskUuid_ = s;
                            break;
                        }
                        case 18: {
                            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder subBuilder = null;
                            if (srcHarddiskKey_ != null) {
                                subBuilder = srcHarddiskKey_.toBuilder();
                            }
                            srcHarddiskKey_ = input.readMessage(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(srcHarddiskKey_);
                                srcHarddiskKey_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 24: {

                            srcHarddiskIdx_ = input.readInt32();
                            break;
                        }
                        case 34: {
                            String s = input.readStringRequireUtf8();

                            boxUuid_ = s;
                            break;
                        }
                        case 42: {
                            String s = input.readStringRequireUtf8();

                            boxPath_ = s;
                            break;
                        }
                        case 50: {
                            String s = input.readStringRequireUtf8();

                            realtimeQcow2FullPath_ = s;
                            break;
                        }
                        case 56: {

                            syncLen_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo.Builder.class);
        }

        public static final int SRC_HARDDISK_UUID_FIELD_NUMBER = 1;
        private volatile Object srcHarddiskUuid_;
        /**
         * <pre>
         *关联的源磁盘唯一ID
         * </pre>
         *
         * <code>optional string src_harddisk_uuid = 1;</code>
         */
        public String getSrcHarddiskUuid() {
            Object ref = srcHarddiskUuid_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                srcHarddiskUuid_ = s;
                return s;
            }
        }
        /**
         * <pre>
         *关联的源磁盘唯一ID
         * </pre>
         *
         * <code>optional string src_harddisk_uuid = 1;</code>
         */
        public com.google.protobuf.ByteString
        getSrcHarddiskUuidBytes() {
            Object ref = srcHarddiskUuid_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                srcHarddiskUuid_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SRC_HARDDISK_KEY_FIELD_NUMBER = 2;
        private cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey srcHarddiskKey_;
        /**
         * <pre>
         *关联的源磁盘内部唯一标识
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
         */
        public boolean hasSrcHarddiskKey() {
            return srcHarddiskKey_ != null;
        }
        /**
         * <pre>
         *关联的源磁盘内部唯一标识
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getSrcHarddiskKey() {
            return srcHarddiskKey_ == null ? cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance() : srcHarddiskKey_;
        }
        /**
         * <pre>
         *关联的源磁盘内部唯一标识
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getSrcHarddiskKeyOrBuilder() {
            return getSrcHarddiskKey();
        }

        public static final int SRC_HARDDISK_IDX_FIELD_NUMBER = 3;
        private int srcHarddiskIdx_;
        /**
         * <pre>
         *关联的源磁盘内部索引
         * </pre>
         *
         * <code>optional int32 src_harddisk_idx = 3;</code>
         */
        public int getSrcHarddiskIdx() {
            return srcHarddiskIdx_;
        }

        public static final int BOX_UUID_FIELD_NUMBER = 4;
        private volatile Object boxUuid_;
        /**
         * <pre>
         *当前磁盘关联的box uuid
         * </pre>
         *
         * <code>optional string box_uuid = 4;</code>
         */
        public String getBoxUuid() {
            Object ref = boxUuid_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                boxUuid_ = s;
                return s;
            }
        }
        /**
         * <pre>
         *当前磁盘关联的box uuid
         * </pre>
         *
         * <code>optional string box_uuid = 4;</code>
         */
        public com.google.protobuf.ByteString
        getBoxUuidBytes() {
            Object ref = boxUuid_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                boxUuid_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int BOX_PATH_FIELD_NUMBER = 5;
        private volatile Object boxPath_;
        /**
         * <pre>
         *当前磁盘关联的box路径
         * </pre>
         *
         * <code>optional string box_path = 5;</code>
         */
        public String getBoxPath() {
            Object ref = boxPath_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                boxPath_ = s;
                return s;
            }
        }
        /**
         * <pre>
         *当前磁盘关联的box路径
         * </pre>
         *
         * <code>optional string box_path = 5;</code>
         */
        public com.google.protobuf.ByteString
        getBoxPathBytes() {
            Object ref = boxPath_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                boxPath_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int REALTIME_QCOW2_FULL_PATH_FIELD_NUMBER = 6;
        private volatile Object realtimeQcow2FullPath_;
        /**
         * <pre>
         *当前磁盘关联的实时点快照全路径
         * </pre>
         *
         * <code>optional string realtime_qcow2_full_path = 6;</code>
         */
        public String getRealtimeQcow2FullPath() {
            Object ref = realtimeQcow2FullPath_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                realtimeQcow2FullPath_ = s;
                return s;
            }
        }
        /**
         * <pre>
         *当前磁盘关联的实时点快照全路径
         * </pre>
         *
         * <code>optional string realtime_qcow2_full_path = 6;</code>
         */
        public com.google.protobuf.ByteString
        getRealtimeQcow2FullPathBytes() {
            Object ref = realtimeQcow2FullPath_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                realtimeQcow2FullPath_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SYNC_LEN_FIELD_NUMBER = 7;
        private long syncLen_;
        /**
         * <pre>
         *当前磁盘同步数据量
         * </pre>
         *
         * <code>optional int64 sync_len = 7;</code>
         */
        public long getSyncLen() {
            return syncLen_;
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getSrcHarddiskUuidBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, srcHarddiskUuid_);
            }
            if (srcHarddiskKey_ != null) {
                output.writeMessage(2, getSrcHarddiskKey());
            }
            if (srcHarddiskIdx_ != 0) {
                output.writeInt32(3, srcHarddiskIdx_);
            }
            if (!getBoxUuidBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 4, boxUuid_);
            }
            if (!getBoxPathBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 5, boxPath_);
            }
            if (!getRealtimeQcow2FullPathBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 6, realtimeQcow2FullPath_);
            }
            if (syncLen_ != 0L) {
                output.writeInt64(7, syncLen_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getSrcHarddiskUuidBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, srcHarddiskUuid_);
            }
            if (srcHarddiskKey_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getSrcHarddiskKey());
            }
            if (srcHarddiskIdx_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, srcHarddiskIdx_);
            }
            if (!getBoxUuidBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, boxUuid_);
            }
            if (!getBoxPathBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, boxPath_);
            }
            if (!getRealtimeQcow2FullPathBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, realtimeQcow2FullPath_);
            }
            if (syncLen_ != 0L) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(7, syncLen_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo)) {
                return super.equals(obj);
            }
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo other = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo) obj;

            boolean result = true;
            result = result && getSrcHarddiskUuid()
                    .equals(other.getSrcHarddiskUuid());
            result = result && (hasSrcHarddiskKey() == other.hasSrcHarddiskKey());
            if (hasSrcHarddiskKey()) {
                result = result && getSrcHarddiskKey()
                        .equals(other.getSrcHarddiskKey());
            }
            result = result && (getSrcHarddiskIdx()
                    == other.getSrcHarddiskIdx());
            result = result && getBoxUuid()
                    .equals(other.getBoxUuid());
            result = result && getBoxPath()
                    .equals(other.getBoxPath());
            result = result && getRealtimeQcow2FullPath()
                    .equals(other.getRealtimeQcow2FullPath());
            result = result && (getSyncLen()
                    == other.getSyncLen());
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptorForType().hashCode();
            hash = (37 * hash) + SRC_HARDDISK_UUID_FIELD_NUMBER;
            hash = (53 * hash) + getSrcHarddiskUuid().hashCode();
            if (hasSrcHarddiskKey()) {
                hash = (37 * hash) + SRC_HARDDISK_KEY_FIELD_NUMBER;
                hash = (53 * hash) + getSrcHarddiskKey().hashCode();
            }
            hash = (37 * hash) + SRC_HARDDISK_IDX_FIELD_NUMBER;
            hash = (53 * hash) + getSrcHarddiskIdx();
            hash = (37 * hash) + BOX_UUID_FIELD_NUMBER;
            hash = (53 * hash) + getBoxUuid().hashCode();
            hash = (37 * hash) + BOX_PATH_FIELD_NUMBER;
            hash = (53 * hash) + getBoxPath().hashCode();
            hash = (37 * hash) + REALTIME_QCOW2_FULL_PATH_FIELD_NUMBER;
            hash = (53 * hash) + getRealtimeQcow2FullPath().hashCode();
            hash = (37 * hash) + SYNC_LEN_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                    getSyncLen());
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * <pre>
         *同步索引信息
         * </pre>
         *
         * Protobuf type {@code one2data.rbtmqmsgcli.client.SyncIndexInfo}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:one2data.rbtmqmsgcli.client.SyncIndexInfo)
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfoOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo.Builder.class);
            }

            // Construct using cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }
            public Builder clear() {
                super.clear();
                srcHarddiskUuid_ = "";

                if (srcHarddiskKeyBuilder_ == null) {
                    srcHarddiskKey_ = null;
                } else {
                    srcHarddiskKey_ = null;
                    srcHarddiskKeyBuilder_ = null;
                }
                srcHarddiskIdx_ = 0;

                boxUuid_ = "";

                boxPath_ = "";

                realtimeQcow2FullPath_ = "";

                syncLen_ = 0L;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_descriptor;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo getDefaultInstanceForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo.getDefaultInstance();
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo build() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo buildPartial() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo result = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo(this);
                result.srcHarddiskUuid_ = srcHarddiskUuid_;
                if (srcHarddiskKeyBuilder_ == null) {
                    result.srcHarddiskKey_ = srcHarddiskKey_;
                } else {
                    result.srcHarddiskKey_ = srcHarddiskKeyBuilder_.build();
                }
                result.srcHarddiskIdx_ = srcHarddiskIdx_;
                result.boxUuid_ = boxUuid_;
                result.boxPath_ = boxPath_;
                result.realtimeQcow2FullPath_ = realtimeQcow2FullPath_;
                result.syncLen_ = syncLen_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo) {
                    return mergeFrom((cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo other) {
                if (other == cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo.getDefaultInstance()) return this;
                if (!other.getSrcHarddiskUuid().isEmpty()) {
                    srcHarddiskUuid_ = other.srcHarddiskUuid_;
                    onChanged();
                }
                if (other.hasSrcHarddiskKey()) {
                    mergeSrcHarddiskKey(other.getSrcHarddiskKey());
                }
                if (other.getSrcHarddiskIdx() != 0) {
                    setSrcHarddiskIdx(other.getSrcHarddiskIdx());
                }
                if (!other.getBoxUuid().isEmpty()) {
                    boxUuid_ = other.boxUuid_;
                    onChanged();
                }
                if (!other.getBoxPath().isEmpty()) {
                    boxPath_ = other.boxPath_;
                    onChanged();
                }
                if (!other.getRealtimeQcow2FullPath().isEmpty()) {
                    realtimeQcow2FullPath_ = other.realtimeQcow2FullPath_;
                    onChanged();
                }
                if (other.getSyncLen() != 0L) {
                    setSyncLen(other.getSyncLen());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private Object srcHarddiskUuid_ = "";
            /**
             * <pre>
             *关联的源磁盘唯一ID
             * </pre>
             *
             * <code>optional string src_harddisk_uuid = 1;</code>
             */
            public String getSrcHarddiskUuid() {
                Object ref = srcHarddiskUuid_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    srcHarddiskUuid_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             *关联的源磁盘唯一ID
             * </pre>
             *
             * <code>optional string src_harddisk_uuid = 1;</code>
             */
            public com.google.protobuf.ByteString
            getSrcHarddiskUuidBytes() {
                Object ref = srcHarddiskUuid_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    srcHarddiskUuid_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <pre>
             *关联的源磁盘唯一ID
             * </pre>
             *
             * <code>optional string src_harddisk_uuid = 1;</code>
             */
            public Builder setSrcHarddiskUuid(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                srcHarddiskUuid_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *关联的源磁盘唯一ID
             * </pre>
             *
             * <code>optional string src_harddisk_uuid = 1;</code>
             */
            public Builder clearSrcHarddiskUuid() {

                srcHarddiskUuid_ = getDefaultInstance().getSrcHarddiskUuid();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *关联的源磁盘唯一ID
             * </pre>
             *
             * <code>optional string src_harddisk_uuid = 1;</code>
             */
            public Builder setSrcHarddiskUuidBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                srcHarddiskUuid_ = value;
                onChanged();
                return this;
            }

            private cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey srcHarddiskKey_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder> srcHarddiskKeyBuilder_;
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public boolean hasSrcHarddiskKey() {
                return srcHarddiskKeyBuilder_ != null || srcHarddiskKey_ != null;
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey getSrcHarddiskKey() {
                if (srcHarddiskKeyBuilder_ == null) {
                    return srcHarddiskKey_ == null ? cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance() : srcHarddiskKey_;
                } else {
                    return srcHarddiskKeyBuilder_.getMessage();
                }
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public Builder setSrcHarddiskKey(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                if (srcHarddiskKeyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    srcHarddiskKey_ = value;
                    onChanged();
                } else {
                    srcHarddiskKeyBuilder_.setMessage(value);
                }

                return this;
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public Builder setSrcHarddiskKey(
                    cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder builderForValue) {
                if (srcHarddiskKeyBuilder_ == null) {
                    srcHarddiskKey_ = builderForValue.build();
                    onChanged();
                } else {
                    srcHarddiskKeyBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public Builder mergeSrcHarddiskKey(cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey value) {
                if (srcHarddiskKeyBuilder_ == null) {
                    if (srcHarddiskKey_ != null) {
                        srcHarddiskKey_ =
                                cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.newBuilder(srcHarddiskKey_).mergeFrom(value).buildPartial();
                    } else {
                        srcHarddiskKey_ = value;
                    }
                    onChanged();
                } else {
                    srcHarddiskKeyBuilder_.mergeFrom(value);
                }

                return this;
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public Builder clearSrcHarddiskKey() {
                if (srcHarddiskKeyBuilder_ == null) {
                    srcHarddiskKey_ = null;
                    onChanged();
                } else {
                    srcHarddiskKey_ = null;
                    srcHarddiskKeyBuilder_ = null;
                }

                return this;
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder getSrcHarddiskKeyBuilder() {

                onChanged();
                return getSrcHarddiskKeyFieldBuilder().getBuilder();
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder getSrcHarddiskKeyOrBuilder() {
                if (srcHarddiskKeyBuilder_ != null) {
                    return srcHarddiskKeyBuilder_.getMessageOrBuilder();
                } else {
                    return srcHarddiskKey_ == null ?
                            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.getDefaultInstance() : srcHarddiskKey_;
                }
            }
            /**
             * <pre>
             *关联的源磁盘内部唯一标识
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.common.BlockDeviceKey src_harddisk_key = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>
            getSrcHarddiskKeyFieldBuilder() {
                if (srcHarddiskKeyBuilder_ == null) {
                    srcHarddiskKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKey.Builder, cn.keptdata.one2data.header.message.protobuf.common.Node.BlockDeviceKeyOrBuilder>(
                            getSrcHarddiskKey(),
                            getParentForChildren(),
                            isClean());
                    srcHarddiskKey_ = null;
                }
                return srcHarddiskKeyBuilder_;
            }

            private int srcHarddiskIdx_ ;
            /**
             * <pre>
             *关联的源磁盘内部索引
             * </pre>
             *
             * <code>optional int32 src_harddisk_idx = 3;</code>
             */
            public int getSrcHarddiskIdx() {
                return srcHarddiskIdx_;
            }
            /**
             * <pre>
             *关联的源磁盘内部索引
             * </pre>
             *
             * <code>optional int32 src_harddisk_idx = 3;</code>
             */
            public Builder setSrcHarddiskIdx(int value) {

                srcHarddiskIdx_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *关联的源磁盘内部索引
             * </pre>
             *
             * <code>optional int32 src_harddisk_idx = 3;</code>
             */
            public Builder clearSrcHarddiskIdx() {

                srcHarddiskIdx_ = 0;
                onChanged();
                return this;
            }

            private Object boxUuid_ = "";
            /**
             * <pre>
             *当前磁盘关联的box uuid
             * </pre>
             *
             * <code>optional string box_uuid = 4;</code>
             */
            public String getBoxUuid() {
                Object ref = boxUuid_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    boxUuid_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             *当前磁盘关联的box uuid
             * </pre>
             *
             * <code>optional string box_uuid = 4;</code>
             */
            public com.google.protobuf.ByteString
            getBoxUuidBytes() {
                Object ref = boxUuid_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    boxUuid_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <pre>
             *当前磁盘关联的box uuid
             * </pre>
             *
             * <code>optional string box_uuid = 4;</code>
             */
            public Builder setBoxUuid(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                boxUuid_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *当前磁盘关联的box uuid
             * </pre>
             *
             * <code>optional string box_uuid = 4;</code>
             */
            public Builder clearBoxUuid() {

                boxUuid_ = getDefaultInstance().getBoxUuid();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *当前磁盘关联的box uuid
             * </pre>
             *
             * <code>optional string box_uuid = 4;</code>
             */
            public Builder setBoxUuidBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                boxUuid_ = value;
                onChanged();
                return this;
            }

            private Object boxPath_ = "";
            /**
             * <pre>
             *当前磁盘关联的box路径
             * </pre>
             *
             * <code>optional string box_path = 5;</code>
             */
            public String getBoxPath() {
                Object ref = boxPath_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    boxPath_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             *当前磁盘关联的box路径
             * </pre>
             *
             * <code>optional string box_path = 5;</code>
             */
            public com.google.protobuf.ByteString
            getBoxPathBytes() {
                Object ref = boxPath_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    boxPath_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <pre>
             *当前磁盘关联的box路径
             * </pre>
             *
             * <code>optional string box_path = 5;</code>
             */
            public Builder setBoxPath(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                boxPath_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *当前磁盘关联的box路径
             * </pre>
             *
             * <code>optional string box_path = 5;</code>
             */
            public Builder clearBoxPath() {

                boxPath_ = getDefaultInstance().getBoxPath();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *当前磁盘关联的box路径
             * </pre>
             *
             * <code>optional string box_path = 5;</code>
             */
            public Builder setBoxPathBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                boxPath_ = value;
                onChanged();
                return this;
            }

            private Object realtimeQcow2FullPath_ = "";
            /**
             * <pre>
             *当前磁盘关联的实时点快照全路径
             * </pre>
             *
             * <code>optional string realtime_qcow2_full_path = 6;</code>
             */
            public String getRealtimeQcow2FullPath() {
                Object ref = realtimeQcow2FullPath_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    realtimeQcow2FullPath_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             *当前磁盘关联的实时点快照全路径
             * </pre>
             *
             * <code>optional string realtime_qcow2_full_path = 6;</code>
             */
            public com.google.protobuf.ByteString
            getRealtimeQcow2FullPathBytes() {
                Object ref = realtimeQcow2FullPath_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    realtimeQcow2FullPath_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <pre>
             *当前磁盘关联的实时点快照全路径
             * </pre>
             *
             * <code>optional string realtime_qcow2_full_path = 6;</code>
             */
            public Builder setRealtimeQcow2FullPath(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                realtimeQcow2FullPath_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *当前磁盘关联的实时点快照全路径
             * </pre>
             *
             * <code>optional string realtime_qcow2_full_path = 6;</code>
             */
            public Builder clearRealtimeQcow2FullPath() {

                realtimeQcow2FullPath_ = getDefaultInstance().getRealtimeQcow2FullPath();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *当前磁盘关联的实时点快照全路径
             * </pre>
             *
             * <code>optional string realtime_qcow2_full_path = 6;</code>
             */
            public Builder setRealtimeQcow2FullPathBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                realtimeQcow2FullPath_ = value;
                onChanged();
                return this;
            }

            private long syncLen_ ;
            /**
             * <pre>
             *当前磁盘同步数据量
             * </pre>
             *
             * <code>optional int64 sync_len = 7;</code>
             */
            public long getSyncLen() {
                return syncLen_;
            }
            /**
             * <pre>
             *当前磁盘同步数据量
             * </pre>
             *
             * <code>optional int64 sync_len = 7;</code>
             */
            public Builder setSyncLen(long value) {

                syncLen_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *当前磁盘同步数据量
             * </pre>
             *
             * <code>optional int64 sync_len = 7;</code>
             */
            public Builder clearSyncLen() {

                syncLen_ = 0L;
                onChanged();
                return this;
            }
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:one2data.rbtmqmsgcli.client.SyncIndexInfo)
        }

        // @@protoc_insertion_point(class_scope:one2data.rbtmqmsgcli.client.SyncIndexInfo)
        private static final cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo();
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<SyncIndexInfo>
                PARSER = new com.google.protobuf.AbstractParser<SyncIndexInfo>() {
            public SyncIndexInfo parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new SyncIndexInfo(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<SyncIndexInfo> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<SyncIndexInfo> getParserForType() {
            return PARSER;
        }

        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SyncIndexInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface SubscribeBackupProgressOrBuilder extends
            // @@protoc_insertion_point(interface_extends:one2data.rbtmqmsgcli.client.SubscribeBackupProgress)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        String getDeviceUuidKey();
        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        com.google.protobuf.ByteString
        getDeviceUuidKeyBytes();

        /**
         * <pre>
         *备份进度上报时间间隔（单位：秒）
         * </pre>
         *
         * <code>optional int64 report_interval_seconds = 2;</code>
         */
        long getReportIntervalSeconds();

        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
         */
        int getProgressTypeValue();
        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType getProgressType();
    }
    /**
     * <pre>
     *订阅备份进度
     * </pre>
     *
     * Protobuf type {@code one2data.rbtmqmsgcli.client.SubscribeBackupProgress}
     */
    public  static final class SubscribeBackupProgress extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:one2data.rbtmqmsgcli.client.SubscribeBackupProgress)
            SubscribeBackupProgressOrBuilder {
        // Use SubscribeBackupProgress.newBuilder() to construct.
        private SubscribeBackupProgress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
        private SubscribeBackupProgress() {
            deviceUuidKey_ = "";
            reportIntervalSeconds_ = 0L;
            progressType_ = 0;
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }
        private SubscribeBackupProgress(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            deviceUuidKey_ = s;
                            break;
                        }
                        case 16: {

                            reportIntervalSeconds_ = input.readInt64();
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();

                            progressType_ = rawValue;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress.Builder.class);
        }

        public static final int DEVICE_UUID_KEY_FIELD_NUMBER = 1;
        private volatile Object deviceUuidKey_;
        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        public String getDeviceUuidKey() {
            Object ref = deviceUuidKey_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                deviceUuidKey_ = s;
                return s;
            }
        }
        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        public com.google.protobuf.ByteString
        getDeviceUuidKeyBytes() {
            Object ref = deviceUuidKey_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                deviceUuidKey_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int REPORT_INTERVAL_SECONDS_FIELD_NUMBER = 2;
        private long reportIntervalSeconds_;
        /**
         * <pre>
         *备份进度上报时间间隔（单位：秒）
         * </pre>
         *
         * <code>optional int64 report_interval_seconds = 2;</code>
         */
        public long getReportIntervalSeconds() {
            return reportIntervalSeconds_;
        }

        public static final int PROGRESS_TYPE_FIELD_NUMBER = 3;
        private int progressType_;
        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
         */
        public int getProgressTypeValue() {
            return progressType_;
        }
        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType getProgressType() {
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.valueOf(progressType_);
            return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.UNRECOGNIZED : result;
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getDeviceUuidKeyBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, deviceUuidKey_);
            }
            if (reportIntervalSeconds_ != 0L) {
                output.writeInt64(2, reportIntervalSeconds_);
            }
            if (progressType_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.PT_NONE.getNumber()) {
                output.writeEnum(3, progressType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getDeviceUuidKeyBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, deviceUuidKey_);
            }
            if (reportIntervalSeconds_ != 0L) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(2, reportIntervalSeconds_);
            }
            if (progressType_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.PT_NONE.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(3, progressType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress)) {
                return super.equals(obj);
            }
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress other = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress) obj;

            boolean result = true;
            result = result && getDeviceUuidKey()
                    .equals(other.getDeviceUuidKey());
            result = result && (getReportIntervalSeconds()
                    == other.getReportIntervalSeconds());
            result = result && progressType_ == other.progressType_;
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptorForType().hashCode();
            hash = (37 * hash) + DEVICE_UUID_KEY_FIELD_NUMBER;
            hash = (53 * hash) + getDeviceUuidKey().hashCode();
            hash = (37 * hash) + REPORT_INTERVAL_SECONDS_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                    getReportIntervalSeconds());
            hash = (37 * hash) + PROGRESS_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + progressType_;
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * <pre>
         *订阅备份进度
         * </pre>
         *
         * Protobuf type {@code one2data.rbtmqmsgcli.client.SubscribeBackupProgress}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:one2data.rbtmqmsgcli.client.SubscribeBackupProgress)
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgressOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress.Builder.class);
            }

            // Construct using cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }
            public Builder clear() {
                super.clear();
                deviceUuidKey_ = "";

                reportIntervalSeconds_ = 0L;

                progressType_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_descriptor;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress getDefaultInstanceForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress.getDefaultInstance();
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress build() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress buildPartial() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress result = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress(this);
                result.deviceUuidKey_ = deviceUuidKey_;
                result.reportIntervalSeconds_ = reportIntervalSeconds_;
                result.progressType_ = progressType_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress) {
                    return mergeFrom((cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress other) {
                if (other == cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress.getDefaultInstance()) return this;
                if (!other.getDeviceUuidKey().isEmpty()) {
                    deviceUuidKey_ = other.deviceUuidKey_;
                    onChanged();
                }
                if (other.getReportIntervalSeconds() != 0L) {
                    setReportIntervalSeconds(other.getReportIntervalSeconds());
                }
                if (other.progressType_ != 0) {
                    setProgressTypeValue(other.getProgressTypeValue());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private Object deviceUuidKey_ = "";
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public String getDeviceUuidKey() {
                Object ref = deviceUuidKey_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    deviceUuidKey_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public com.google.protobuf.ByteString
            getDeviceUuidKeyBytes() {
                Object ref = deviceUuidKey_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    deviceUuidKey_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public Builder setDeviceUuidKey(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                deviceUuidKey_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public Builder clearDeviceUuidKey() {

                deviceUuidKey_ = getDefaultInstance().getDeviceUuidKey();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public Builder setDeviceUuidKeyBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                deviceUuidKey_ = value;
                onChanged();
                return this;
            }

            private long reportIntervalSeconds_ ;
            /**
             * <pre>
             *备份进度上报时间间隔（单位：秒）
             * </pre>
             *
             * <code>optional int64 report_interval_seconds = 2;</code>
             */
            public long getReportIntervalSeconds() {
                return reportIntervalSeconds_;
            }
            /**
             * <pre>
             *备份进度上报时间间隔（单位：秒）
             * </pre>
             *
             * <code>optional int64 report_interval_seconds = 2;</code>
             */
            public Builder setReportIntervalSeconds(long value) {

                reportIntervalSeconds_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *备份进度上报时间间隔（单位：秒）
             * </pre>
             *
             * <code>optional int64 report_interval_seconds = 2;</code>
             */
            public Builder clearReportIntervalSeconds() {

                reportIntervalSeconds_ = 0L;
                onChanged();
                return this;
            }

            private int progressType_ = 0;
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
             */
            public int getProgressTypeValue() {
                return progressType_;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
             */
            public Builder setProgressTypeValue(int value) {
                progressType_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType getProgressType() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.valueOf(progressType_);
                return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.UNRECOGNIZED : result;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
             */
            public Builder setProgressType(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                progressType_ = value.getNumber();
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 3;</code>
             */
            public Builder clearProgressType() {

                progressType_ = 0;
                onChanged();
                return this;
            }
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:one2data.rbtmqmsgcli.client.SubscribeBackupProgress)
        }

        // @@protoc_insertion_point(class_scope:one2data.rbtmqmsgcli.client.SubscribeBackupProgress)
        private static final cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress();
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<SubscribeBackupProgress>
                PARSER = new com.google.protobuf.AbstractParser<SubscribeBackupProgress>() {
            public SubscribeBackupProgress parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new SubscribeBackupProgress(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<SubscribeBackupProgress> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<SubscribeBackupProgress> getParserForType() {
            return PARSER;
        }

        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.SubscribeBackupProgress getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface UnSubscribeBackupProgressOrBuilder extends
            // @@protoc_insertion_point(interface_extends:one2data.rbtmqmsgcli.client.UnSubscribeBackupProgress)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        String getDeviceUuidKey();
        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        com.google.protobuf.ByteString
        getDeviceUuidKeyBytes();

        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
         */
        int getProgressTypeValue();
        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
         */
        cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType getProgressType();
    }
    /**
     * <pre>
     *取消订阅备份进度
     * </pre>
     *
     * Protobuf type {@code one2data.rbtmqmsgcli.client.UnSubscribeBackupProgress}
     */
    public  static final class UnSubscribeBackupProgress extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:one2data.rbtmqmsgcli.client.UnSubscribeBackupProgress)
            UnSubscribeBackupProgressOrBuilder {
        // Use UnSubscribeBackupProgress.newBuilder() to construct.
        private UnSubscribeBackupProgress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
        private UnSubscribeBackupProgress() {
            deviceUuidKey_ = "";
            progressType_ = 0;
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }
        private UnSubscribeBackupProgress(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            deviceUuidKey_ = s;
                            break;
                        }
                        case 16: {
                            int rawValue = input.readEnum();

                            progressType_ = rawValue;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress.Builder.class);
        }

        public static final int DEVICE_UUID_KEY_FIELD_NUMBER = 1;
        private volatile Object deviceUuidKey_;
        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        public String getDeviceUuidKey() {
            Object ref = deviceUuidKey_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                deviceUuidKey_ = s;
                return s;
            }
        }
        /**
         * <pre>
         *备份Agent 内部唯一ID,用于表示设备
         * </pre>
         *
         * <code>optional string device_uuid_key = 1;</code>
         */
        public com.google.protobuf.ByteString
        getDeviceUuidKeyBytes() {
            Object ref = deviceUuidKey_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                deviceUuidKey_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int PROGRESS_TYPE_FIELD_NUMBER = 2;
        private int progressType_;
        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
         */
        public int getProgressTypeValue() {
            return progressType_;
        }
        /**
         * <pre>
         * 进度类型
         * </pre>
         *
         * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
         */
        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType getProgressType() {
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.valueOf(progressType_);
            return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.UNRECOGNIZED : result;
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getDeviceUuidKeyBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, deviceUuidKey_);
            }
            if (progressType_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.PT_NONE.getNumber()) {
                output.writeEnum(2, progressType_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getDeviceUuidKeyBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, deviceUuidKey_);
            }
            if (progressType_ != cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.PT_NONE.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(2, progressType_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress)) {
                return super.equals(obj);
            }
            cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress other = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress) obj;

            boolean result = true;
            result = result && getDeviceUuidKey()
                    .equals(other.getDeviceUuidKey());
            result = result && progressType_ == other.progressType_;
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptorForType().hashCode();
            hash = (37 * hash) + DEVICE_UUID_KEY_FIELD_NUMBER;
            hash = (53 * hash) + getDeviceUuidKey().hashCode();
            hash = (37 * hash) + PROGRESS_TYPE_FIELD_NUMBER;
            hash = (53 * hash) + progressType_;
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * <pre>
         *取消订阅备份进度
         * </pre>
         *
         * Protobuf type {@code one2data.rbtmqmsgcli.client.UnSubscribeBackupProgress}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:one2data.rbtmqmsgcli.client.UnSubscribeBackupProgress)
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgressOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress.class, cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress.Builder.class);
            }

            // Construct using cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }
            public Builder clear() {
                super.clear();
                deviceUuidKey_ = "";

                progressType_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_descriptor;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress getDefaultInstanceForType() {
                return cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress.getDefaultInstance();
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress build() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress buildPartial() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress result = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress(this);
                result.deviceUuidKey_ = deviceUuidKey_;
                result.progressType_ = progressType_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress) {
                    return mergeFrom((cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress other) {
                if (other == cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress.getDefaultInstance()) return this;
                if (!other.getDeviceUuidKey().isEmpty()) {
                    deviceUuidKey_ = other.deviceUuidKey_;
                    onChanged();
                }
                if (other.progressType_ != 0) {
                    setProgressTypeValue(other.getProgressTypeValue());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private Object deviceUuidKey_ = "";
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public String getDeviceUuidKey() {
                Object ref = deviceUuidKey_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    deviceUuidKey_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public com.google.protobuf.ByteString
            getDeviceUuidKeyBytes() {
                Object ref = deviceUuidKey_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    deviceUuidKey_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public Builder setDeviceUuidKey(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                deviceUuidKey_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public Builder clearDeviceUuidKey() {

                deviceUuidKey_ = getDefaultInstance().getDeviceUuidKey();
                onChanged();
                return this;
            }
            /**
             * <pre>
             *备份Agent 内部唯一ID,用于表示设备
             * </pre>
             *
             * <code>optional string device_uuid_key = 1;</code>
             */
            public Builder setDeviceUuidKeyBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                deviceUuidKey_ = value;
                onChanged();
                return this;
            }

            private int progressType_ = 0;
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
             */
            public int getProgressTypeValue() {
                return progressType_;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
             */
            public Builder setProgressTypeValue(int value) {
                progressType_ = value;
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
             */
            public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType getProgressType() {
                cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType result = cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.valueOf(progressType_);
                return result == null ? cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType.UNRECOGNIZED : result;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
             */
            public Builder setProgressType(cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.ProgressType value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                progressType_ = value.getNumber();
                onChanged();
                return this;
            }
            /**
             * <pre>
             * 进度类型
             * </pre>
             *
             * <code>optional .one2data.rbtmqmsgcli.client.ProgressType progress_type = 2;</code>
             */
            public Builder clearProgressType() {

                progressType_ = 0;
                onChanged();
                return this;
            }
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:one2data.rbtmqmsgcli.client.UnSubscribeBackupProgress)
        }

        // @@protoc_insertion_point(class_scope:one2data.rbtmqmsgcli.client.UnSubscribeBackupProgress)
        private static final cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress();
        }

        public static cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<UnSubscribeBackupProgress>
                PARSER = new com.google.protobuf.AbstractParser<UnSubscribeBackupProgress>() {
            public UnSubscribeBackupProgress parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new UnSubscribeBackupProgress(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<UnSubscribeBackupProgress> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<UnSubscribeBackupProgress> getParserForType() {
            return PARSER;
        }

        public cn.keptdata.one2data.header.message.protobuf.client.BackupMessage.UnSubscribeBackupProgress getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_one2data_rbtmqmsgcli_client_BackupConfig_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }
    private static  com.google.protobuf.Descriptors.FileDescriptor
            descriptor;
    static {
        String[] descriptorData = {
                "\n\032client/BackupMessage.proto\022\033one2data.r" +
                        "btmqmsgcli.client\032\023common/Common.proto\032\021" +
                        "common/Node.proto\"\200\013\n\014BackupConfig\022\030\n\020ba" +
                        "ckup_task_uuid\030\001 \001(\t\022Z\n\024need_backup_hard" +
                        "ware\030\002 \001(\0132<.one2data.rbtmqmsgcli.client" +
                        ".BackupConfig.NeedBackupHardware\022>\n\014netw" +
                        "ork_info\030\003 \001(\0132(.one2data.rbtmqmsgcli.co" +
                        "mmon.NetworkInfo\022O\n\014extend_paras\030\004 \001(\01329" +
                        ".one2data.rbtmqmsgcli.client.BackupConfi" +
                        "g.ExtendParameter\022$\n\034storage_convert_ser",
                "vice_port\030\005 \001(\005\022K\n\014channel_type\030\006 \001(\01625." +
                        "one2data.rbtmqmsgcli.client.BackupConfig" +
                        ".ChannelType\022b\n\030data_storage_granularity" +
                        "\030\007 \001(\0162@.one2data.rbtmqmsgcli.client.Bac" +
                        "kupConfig.DataStorageGranularity\032\233\002\n\022Nee" +
                        "dBackupHardware\022A\n\014harddisk_key\030\001 \003(\0132+." +
                        "one2data.rbtmqmsgcli.common.BlockDeviceK" +
                        "ey\022B\n\rpartition_key\030\002 \003(\0132+.one2data.rbt" +
                        "mqmsgcli.common.BlockDeviceKey\022;\n\006lv_key" +
                        "\030\003 \003(\0132+.one2data.rbtmqmsgcli.common.Blo",
                "ckDeviceKey\022A\n\014drift_lv_key\030\004 \003(\0132+.one2" +
                        "data.rbtmqmsgcli.common.BlockDeviceKey\032\214" +
                        "\004\n\017ExtendParameter\022>\n\014encrypt_type\030\001 \001(\016" +
                        "2(.one2data.rbtmqmsgcli.common.EncryptTy" +
                        "pe\022@\n\rcompress_type\030\002 \001(\0162).one2data.rbt" +
                        "mqmsgcli.common.CompressType\022\027\n\017max_sess" +
                        "ion_cnt\030\003 \001(\005\022\032\n\022is_backup_priority\030\004 \001(" +
                        "\010\022\037\n\027limit_backup_speed_Kbps\030\005 \001(\003\022\035\n\025sy" +
                        "nc_force_sync_clean\030\006 \001(\010\022\033\n\023sync_no_flu" +
                        "sh_cache\030\007 \001(\010\022\023\n\013sync_script\030\010 \001(\t\022\035\n\025l",
                "imit_disk_speed_Kbps\030\t \001(\003\022\025\n\rsync_prior" +
                        "ity\030\n \001(\t\022\021\n\tauto_sync\030\013 \001(\010\022\026\n\016reset_pr" +
                        "ogress\030\014 \001(\010\022\025\n\rsync_poll_cnt\030\r \001(\005\022\024\n\014m" +
                        "erge_bitmap\030\016 \001(\010\022B\n\016compress_level\030\017 \001(" +
                        "\0162*.one2data.rbtmqmsgcli.common.Compress" +
                        "Level\"*\n\013ChannelType\022\n\n\006CT_TCP\020\000\022\017\n\013CT_L" +
                        "AN_FREE\020\001\"9\n\026DataStorageGranularity\022\016\n\nD" +
                        "SG_SECOND\020\000\022\017\n\013DSG_USECOND\020\001\"\343\001\n\rSyncInd" +
                        "exInfo\022\031\n\021src_harddisk_uuid\030\001 \001(\t\022E\n\020src" +
                        "_harddisk_key\030\002 \001(\0132+.one2data.rbtmqmsgc",
                "li.common.BlockDeviceKey\022\030\n\020src_harddisk" +
                        "_idx\030\003 \001(\005\022\020\n\010box_uuid\030\004 \001(\t\022\020\n\010box_path" +
                        "\030\005 \001(\t\022 \n\030realtime_qcow2_full_path\030\006 \001(\t" +
                        "\022\020\n\010sync_len\030\007 \001(\003\"\225\001\n\027SubscribeBackupPr" +
                        "ogress\022\027\n\017device_uuid_key\030\001 \001(\t\022\037\n\027repor" +
                        "t_interval_seconds\030\002 \001(\003\022@\n\rprogress_typ" +
                        "e\030\003 \001(\0162).one2data.rbtmqmsgcli.client.Pr" +
                        "ogressType\"v\n\031UnSubscribeBackupProgress\022" +
                        "\027\n\017device_uuid_key\030\001 \001(\t\022@\n\rprogress_typ" +
                        "e\030\002 \001(\0162).one2data.rbtmqmsgcli.client.Pr",
                "ogressType*C\n\014ProgressType\022\013\n\007PT_NONE\020\000\022" +
                        "\014\n\010PT_TOTAL\020\001\022\014\n\010PT_BLOCK\020\002\022\n\n\006PT_ALL\020\003B" +
                        "D\n3cn.keptdata.one2data.header.message.p" +
                        "rotobuf.clientB\rBackupMessageb\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[] {
                                cn.keptdata.one2data.header.message.protobuf.common.Common.getDescriptor(),
                                cn.keptdata.one2data.header.message.protobuf.common.Node.getDescriptor(),
                        }, assigner);
        internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_one2data_rbtmqmsgcli_client_BackupConfig_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor,
                new String[] { "BackupTaskUuid", "NeedBackupHardware", "NetworkInfo", "ExtendParas", "StorageConvertServicePort", "ChannelType", "DataStorageGranularity", });
        internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_descriptor =
                internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor.getNestedTypes().get(0);
        internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_one2data_rbtmqmsgcli_client_BackupConfig_NeedBackupHardware_descriptor,
                new String[] { "HarddiskKey", "PartitionKey", "LvKey", "DriftLvKey", });
        internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_descriptor =
                internal_static_one2data_rbtmqmsgcli_client_BackupConfig_descriptor.getNestedTypes().get(1);
        internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_one2data_rbtmqmsgcli_client_BackupConfig_ExtendParameter_descriptor,
                new String[] { "EncryptType", "CompressType", "MaxSessionCnt", "IsBackupPriority", "LimitBackupSpeedKbps", "SyncForceSyncClean", "SyncNoFlushCache", "SyncScript", "LimitDiskSpeedKbps", "SyncPriority", "AutoSync", "ResetProgress", "SyncPollCnt", "MergeBitmap", "CompressLevel", });
        internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_one2data_rbtmqmsgcli_client_SyncIndexInfo_descriptor,
                new String[] { "SrcHarddiskUuid", "SrcHarddiskKey", "SrcHarddiskIdx", "BoxUuid", "BoxPath", "RealtimeQcow2FullPath", "SyncLen", });
        internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_one2data_rbtmqmsgcli_client_SubscribeBackupProgress_descriptor,
                new String[] { "DeviceUuidKey", "ReportIntervalSeconds", "ProgressType", });
        internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_descriptor =
                getDescriptor().getMessageTypes().get(3);
        internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_one2data_rbtmqmsgcli_client_UnSubscribeBackupProgress_descriptor,
                new String[] { "DeviceUuidKey", "ProgressType", });
        cn.keptdata.one2data.header.message.protobuf.common.Common.getDescriptor();
        cn.keptdata.one2data.header.message.protobuf.common.Node.getDescriptor();
    }

    // @@protoc_insertion_point(outer_class_scope)
}
